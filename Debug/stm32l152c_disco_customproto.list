
stm32l152c_disco_customproto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d28  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ed0  08002ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08002ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009a0  20000018  08002ef0  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200009b8  08002ef0  000209b8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c4f1  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f09  00000000  00000000  0002c532  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ce0  00000000  00000000  0002e440  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bd8  00000000  00000000  0002f120  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005415  00000000  00000000  0002fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000043fa  00000000  00000000  0003510d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00039507  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000033f4  00000000  00000000  00039584  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000018 	.word	0x20000018
 800015c:	00000000 	.word	0x00000000
 8000160:	08002e50 	.word	0x08002e50

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000001c 	.word	0x2000001c
 800017c:	08002e50 	.word	0x08002e50

08000180 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b08a      	sub	sp, #40	; 0x28
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800018a:	f107 0314 	add.w	r3, r7, #20
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d10c      	bne.n	80001ba <BSP_LED_Init+0x3a>
 80001a0:	4a1e      	ldr	r2, [pc, #120]	; (800021c <BSP_LED_Init+0x9c>)
 80001a2:	4b1e      	ldr	r3, [pc, #120]	; (800021c <BSP_LED_Init+0x9c>)
 80001a4:	69db      	ldr	r3, [r3, #28]
 80001a6:	f043 0302 	orr.w	r3, r3, #2
 80001aa:	61d3      	str	r3, [r2, #28]
 80001ac:	4b1b      	ldr	r3, [pc, #108]	; (800021c <BSP_LED_Init+0x9c>)
 80001ae:	69db      	ldr	r3, [r3, #28]
 80001b0:	f003 0302 	and.w	r3, r3, #2
 80001b4:	613b      	str	r3, [r7, #16]
 80001b6:	693b      	ldr	r3, [r7, #16]
 80001b8:	e00b      	b.n	80001d2 <BSP_LED_Init+0x52>
 80001ba:	4a18      	ldr	r2, [pc, #96]	; (800021c <BSP_LED_Init+0x9c>)
 80001bc:	4b17      	ldr	r3, [pc, #92]	; (800021c <BSP_LED_Init+0x9c>)
 80001be:	69db      	ldr	r3, [r3, #28]
 80001c0:	f043 0302 	orr.w	r3, r3, #2
 80001c4:	61d3      	str	r3, [r2, #28]
 80001c6:	4b15      	ldr	r3, [pc, #84]	; (800021c <BSP_LED_Init+0x9c>)
 80001c8:	69db      	ldr	r3, [r3, #28]
 80001ca:	f003 0302 	and.w	r3, r3, #2
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin   = GPIO_PIN[Led];
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	4a12      	ldr	r2, [pc, #72]	; (8000220 <BSP_LED_Init+0xa0>)
 80001d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001da:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80001dc:	2301      	movs	r3, #1
 80001de:	61bb      	str	r3, [r7, #24]
  gpioinitstruct.Pull  = GPIO_NOPULL;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80001e4:	2303      	movs	r3, #3
 80001e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <BSP_LED_Init+0xa4>)
 80001ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001f0:	f107 0214 	add.w	r2, r7, #20
 80001f4:	4611      	mov	r1, r2
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f964 	bl	80004c4 <HAL_GPIO_Init>

  /* Reset PIN to switch off the LED */
  HAL_GPIO_WritePin(GPIO_PORT[Led],GPIO_PIN[Led], GPIO_PIN_RESET);
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	4a09      	ldr	r2, [pc, #36]	; (8000224 <BSP_LED_Init+0xa4>)
 8000200:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	4a06      	ldr	r2, [pc, #24]	; (8000220 <BSP_LED_Init+0xa0>)
 8000208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800020c:	2200      	movs	r2, #0
 800020e:	4619      	mov	r1, r3
 8000210:	f000 fad6 	bl	80007c0 <HAL_GPIO_WritePin>
}
 8000214:	bf00      	nop
 8000216:	3728      	adds	r7, #40	; 0x28
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40023800 	.word	0x40023800
 8000220:	08002ea8 	.word	0x08002ea8
 8000224:	20000000 	.word	0x20000000

08000228 <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4a07      	ldr	r2, [pc, #28]	; (8000254 <BSP_LED_Off+0x2c>)
 8000236:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	4a06      	ldr	r2, [pc, #24]	; (8000258 <BSP_LED_Off+0x30>)
 800023e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000242:	2200      	movs	r2, #0
 8000244:	4619      	mov	r1, r3
 8000246:	f000 fabb 	bl	80007c0 <HAL_GPIO_WritePin>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000
 8000258:	08002ea8 	.word	0x08002ea8

0800025c <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	4a06      	ldr	r2, [pc, #24]	; (8000284 <BSP_LED_Toggle+0x28>)
 800026a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	4a05      	ldr	r2, [pc, #20]	; (8000288 <BSP_LED_Toggle+0x2c>)
 8000272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000276:	4619      	mov	r1, r3
 8000278:	f000 faba 	bl	80007f0 <HAL_GPIO_TogglePin>
}
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000000 	.word	0x20000000
 8000288:	08002ea8 	.word	0x08002ea8

0800028c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000292:	2300      	movs	r3, #0
 8000294:	71fb      	strb	r3, [r7, #7]

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000296:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <HAL_Init+0x48>)
 8000298:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <HAL_Init+0x48>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f043 0304 	orr.w	r3, r3, #4
 80002a0:	6013      	str	r3, [r2, #0]
 80002a2:	4a0c      	ldr	r2, [pc, #48]	; (80002d4 <HAL_Init+0x48>)
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <HAL_Init+0x48>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f043 0302 	orr.w	r3, r3, #2
 80002ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002ae:	2003      	movs	r0, #3
 80002b0:	f000 f8d2 	bl	8000458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80002b4:	200f      	movs	r0, #15
 80002b6:	f001 f9ed 	bl	8001694 <HAL_InitTick>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d002      	beq.n	80002c6 <HAL_Init+0x3a>
  {
    status = HAL_ERROR;
 80002c0:	2301      	movs	r3, #1
 80002c2:	71fb      	strb	r3, [r7, #7]
 80002c4:	e001      	b.n	80002ca <HAL_Init+0x3e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80002c6:	f000 faac 	bl	8000822 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80002ca:	79fb      	ldrb	r3, [r7, #7]
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40023c00 	.word	0x40023c00

080002d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <HAL_IncTick+0x1c>)
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <HAL_IncTick+0x20>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4413      	add	r3, r2
 80002e6:	4a03      	ldr	r2, [pc, #12]	; (80002f4 <HAL_IncTick+0x1c>)
 80002e8:	6013      	str	r3, [r2, #0]
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000970 	.word	0x20000970
 80002f8:	2000000c 	.word	0x2000000c

080002fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000300:	4b02      	ldr	r3, [pc, #8]	; (800030c <HAL_GetTick+0x10>)
 8000302:	681b      	ldr	r3, [r3, #0]
}
 8000304:	4618      	mov	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	20000970 	.word	0x20000970

08000310 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <NVIC_SetPriorityGrouping+0x44>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000326:	68ba      	ldr	r2, [r7, #8]
 8000328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800032c:	4013      	ands	r3, r2
 800032e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800033c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000342:	4a04      	ldr	r2, [pc, #16]	; (8000354 <NVIC_SetPriorityGrouping+0x44>)
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	60d3      	str	r3, [r2, #12]
}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <NVIC_GetPriorityGrouping+0x18>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	0a1b      	lsrs	r3, r3, #8
 8000362:	f003 0307 	and.w	r3, r3, #7
}
 8000366:	4618      	mov	r0, r3
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800037e:	4908      	ldr	r1, [pc, #32]	; (80003a0 <NVIC_EnableIRQ+0x2c>)
 8000380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000384:	095b      	lsrs	r3, r3, #5
 8000386:	79fa      	ldrb	r2, [r7, #7]
 8000388:	f002 021f 	and.w	r2, r2, #31
 800038c:	2001      	movs	r0, #1
 800038e:	fa00 f202 	lsl.w	r2, r0, r2
 8000392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	e000e100 	.word	0xe000e100

080003a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	6039      	str	r1, [r7, #0]
 80003ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	da0b      	bge.n	80003d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b8:	490d      	ldr	r1, [pc, #52]	; (80003f0 <NVIC_SetPriority+0x4c>)
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	f003 030f 	and.w	r3, r3, #15
 80003c0:	3b04      	subs	r3, #4
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	0112      	lsls	r2, r2, #4
 80003c8:	b2d2      	uxtb	r2, r2
 80003ca:	440b      	add	r3, r1
 80003cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ce:	e009      	b.n	80003e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d0:	4908      	ldr	r1, [pc, #32]	; (80003f4 <NVIC_SetPriority+0x50>)
 80003d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d6:	683a      	ldr	r2, [r7, #0]
 80003d8:	b2d2      	uxtb	r2, r2
 80003da:	0112      	lsls	r2, r2, #4
 80003dc:	b2d2      	uxtb	r2, r2
 80003de:	440b      	add	r3, r1
 80003e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000ed00 	.word	0xe000ed00
 80003f4:	e000e100 	.word	0xe000e100

080003f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b089      	sub	sp, #36	; 0x24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60f8      	str	r0, [r7, #12]
 8000400:	60b9      	str	r1, [r7, #8]
 8000402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f003 0307 	and.w	r3, r3, #7
 800040a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800040c:	69fb      	ldr	r3, [r7, #28]
 800040e:	f1c3 0307 	rsb	r3, r3, #7
 8000412:	2b04      	cmp	r3, #4
 8000414:	bf28      	it	cs
 8000416:	2304      	movcs	r3, #4
 8000418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800041a:	69fb      	ldr	r3, [r7, #28]
 800041c:	3304      	adds	r3, #4
 800041e:	2b06      	cmp	r3, #6
 8000420:	d902      	bls.n	8000428 <NVIC_EncodePriority+0x30>
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	3b03      	subs	r3, #3
 8000426:	e000      	b.n	800042a <NVIC_EncodePriority+0x32>
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800042c:	2201      	movs	r2, #1
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	fa02 f303 	lsl.w	r3, r2, r3
 8000434:	1e5a      	subs	r2, r3, #1
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	401a      	ands	r2, r3
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800043e:	2101      	movs	r1, #1
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	fa01 f303 	lsl.w	r3, r1, r3
 8000446:	1e59      	subs	r1, r3, #1
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800044c:	4313      	orrs	r3, r2
         );
}
 800044e:	4618      	mov	r0, r3
 8000450:	3724      	adds	r7, #36	; 0x24
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f7ff ff55 	bl	8000310 <NVIC_SetPriorityGrouping>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b086      	sub	sp, #24
 8000472:	af00      	add	r7, sp, #0
 8000474:	4603      	mov	r3, r0
 8000476:	60b9      	str	r1, [r7, #8]
 8000478:	607a      	str	r2, [r7, #4]
 800047a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000480:	f7ff ff6a 	bl	8000358 <NVIC_GetPriorityGrouping>
 8000484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	68b9      	ldr	r1, [r7, #8]
 800048a:	6978      	ldr	r0, [r7, #20]
 800048c:	f7ff ffb4 	bl	80003f8 <NVIC_EncodePriority>
 8000490:	4602      	mov	r2, r0
 8000492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000496:	4611      	mov	r1, r2
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff83 	bl	80003a4 <NVIC_SetPriority>
}
 800049e:	bf00      	nop
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b082      	sub	sp, #8
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	4603      	mov	r3, r0
 80004ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ff5d 	bl	8000374 <NVIC_EnableIRQ>
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004c4:	b480      	push	{r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80004da:	e154      	b.n	8000786 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	2101      	movs	r1, #1
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	fa01 f303 	lsl.w	r3, r1, r3
 80004e8:	4013      	ands	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	f000 8146 	beq.w	8000780 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d003      	beq.n	8000504 <HAL_GPIO_Init+0x40>
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	2b12      	cmp	r3, #18
 8000502:	d123      	bne.n	800054c <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	08da      	lsrs	r2, r3, #3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3208      	adds	r2, #8
 800050c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000510:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	f003 0307 	and.w	r3, r3, #7
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	220f      	movs	r2, #15
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	43db      	mvns	r3, r3
 8000522:	693a      	ldr	r2, [r7, #16]
 8000524:	4013      	ands	r3, r2
 8000526:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	691a      	ldr	r2, [r3, #16]
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	f003 0307 	and.w	r3, r3, #7
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	fa02 f303 	lsl.w	r3, r2, r3
 8000538:	693a      	ldr	r2, [r7, #16]
 800053a:	4313      	orrs	r3, r2
 800053c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	08da      	lsrs	r2, r3, #3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3208      	adds	r2, #8
 8000546:	6939      	ldr	r1, [r7, #16]
 8000548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	2203      	movs	r2, #3
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	43db      	mvns	r3, r3
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	4013      	ands	r3, r2
 8000562:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	f003 0203 	and.w	r2, r3, #3
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	693a      	ldr	r2, [r7, #16]
 8000576:	4313      	orrs	r3, r2
 8000578:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d00b      	beq.n	80005a0 <HAL_GPIO_Init+0xdc>
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d007      	beq.n	80005a0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000594:	2b11      	cmp	r3, #17
 8000596:	d003      	beq.n	80005a0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	2b12      	cmp	r3, #18
 800059e:	d130      	bne.n	8000602 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2203      	movs	r2, #3
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	4013      	ands	r3, r2
 80005b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	68da      	ldr	r2, [r3, #12]
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	693a      	ldr	r2, [r7, #16]
 80005c6:	4313      	orrs	r3, r2
 80005c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	693a      	ldr	r2, [r7, #16]
 80005ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80005d6:	2201      	movs	r2, #1
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	43db      	mvns	r3, r3
 80005e0:	693a      	ldr	r2, [r7, #16]
 80005e2:	4013      	ands	r3, r2
 80005e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	091b      	lsrs	r3, r3, #4
 80005ec:	f003 0201 	and.w	r2, r3, #1
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	2203      	movs	r2, #3
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	43db      	mvns	r3, r3
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	4013      	ands	r3, r2
 8000618:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	689a      	ldr	r2, [r3, #8]
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	4313      	orrs	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	693a      	ldr	r2, [r7, #16]
 8000630:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	2b00      	cmp	r3, #0
 800063c:	f000 80a0 	beq.w	8000780 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000640:	4a57      	ldr	r2, [pc, #348]	; (80007a0 <HAL_GPIO_Init+0x2dc>)
 8000642:	4b57      	ldr	r3, [pc, #348]	; (80007a0 <HAL_GPIO_Init+0x2dc>)
 8000644:	6a1b      	ldr	r3, [r3, #32]
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6213      	str	r3, [r2, #32]
 800064c:	4b54      	ldr	r3, [pc, #336]	; (80007a0 <HAL_GPIO_Init+0x2dc>)
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000658:	4a52      	ldr	r2, [pc, #328]	; (80007a4 <HAL_GPIO_Init+0x2e0>)
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	089b      	lsrs	r3, r3, #2
 800065e:	3302      	adds	r3, #2
 8000660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000664:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	f003 0303 	and.w	r3, r3, #3
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	220f      	movs	r2, #15
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	43db      	mvns	r3, r3
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	4013      	ands	r3, r2
 800067a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a4a      	ldr	r2, [pc, #296]	; (80007a8 <HAL_GPIO_Init+0x2e4>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d019      	beq.n	80006b8 <HAL_GPIO_Init+0x1f4>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a49      	ldr	r2, [pc, #292]	; (80007ac <HAL_GPIO_Init+0x2e8>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d013      	beq.n	80006b4 <HAL_GPIO_Init+0x1f0>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a48      	ldr	r2, [pc, #288]	; (80007b0 <HAL_GPIO_Init+0x2ec>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d00d      	beq.n	80006b0 <HAL_GPIO_Init+0x1ec>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a47      	ldr	r2, [pc, #284]	; (80007b4 <HAL_GPIO_Init+0x2f0>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d007      	beq.n	80006ac <HAL_GPIO_Init+0x1e8>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a46      	ldr	r2, [pc, #280]	; (80007b8 <HAL_GPIO_Init+0x2f4>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d101      	bne.n	80006a8 <HAL_GPIO_Init+0x1e4>
 80006a4:	2304      	movs	r3, #4
 80006a6:	e008      	b.n	80006ba <HAL_GPIO_Init+0x1f6>
 80006a8:	2305      	movs	r3, #5
 80006aa:	e006      	b.n	80006ba <HAL_GPIO_Init+0x1f6>
 80006ac:	2303      	movs	r3, #3
 80006ae:	e004      	b.n	80006ba <HAL_GPIO_Init+0x1f6>
 80006b0:	2302      	movs	r3, #2
 80006b2:	e002      	b.n	80006ba <HAL_GPIO_Init+0x1f6>
 80006b4:	2301      	movs	r3, #1
 80006b6:	e000      	b.n	80006ba <HAL_GPIO_Init+0x1f6>
 80006b8:	2300      	movs	r3, #0
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	f002 0203 	and.w	r2, r2, #3
 80006c0:	0092      	lsls	r2, r2, #2
 80006c2:	4093      	lsls	r3, r2
 80006c4:	693a      	ldr	r2, [r7, #16]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006ca:	4936      	ldr	r1, [pc, #216]	; (80007a4 <HAL_GPIO_Init+0x2e0>)
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	089b      	lsrs	r3, r3, #2
 80006d0:	3302      	adds	r3, #2
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006d8:	4b38      	ldr	r3, [pc, #224]	; (80007bc <HAL_GPIO_Init+0x2f8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	43db      	mvns	r3, r3
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006fc:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <HAL_GPIO_Init+0x2f8>)
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <HAL_GPIO_Init+0x2f8>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	43db      	mvns	r3, r3
 800070c:	693a      	ldr	r2, [r7, #16]
 800070e:	4013      	ands	r3, r2
 8000710:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d003      	beq.n	8000726 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4313      	orrs	r3, r2
 8000724:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000726:	4a25      	ldr	r2, [pc, #148]	; (80007bc <HAL_GPIO_Init+0x2f8>)
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <HAL_GPIO_Init+0x2f8>)
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	43db      	mvns	r3, r3
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	4013      	ands	r3, r2
 800073a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8000748:	693a      	ldr	r2, [r7, #16]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4313      	orrs	r3, r2
 800074e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000750:	4a1a      	ldr	r2, [pc, #104]	; (80007bc <HAL_GPIO_Init+0x2f8>)
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <HAL_GPIO_Init+0x2f8>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	43db      	mvns	r3, r3
 8000760:	693a      	ldr	r2, [r7, #16]
 8000762:	4013      	ands	r3, r2
 8000764:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076e:	2b00      	cmp	r3, #0
 8000770:	d003      	beq.n	800077a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4313      	orrs	r3, r2
 8000778:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <HAL_GPIO_Init+0x2f8>)
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	3301      	adds	r3, #1
 8000784:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	fa22 f303 	lsr.w	r3, r2, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	f47f aea3 	bne.w	80004dc <HAL_GPIO_Init+0x18>
  } 
}
 8000796:	bf00      	nop
 8000798:	371c      	adds	r7, #28
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40010000 	.word	0x40010000
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020400 	.word	0x40020400
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40020c00 	.word	0x40020c00
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010400 	.word	0x40010400

080007c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	807b      	strh	r3, [r7, #2]
 80007cc:	4613      	mov	r3, r2
 80007ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007d0:	787b      	ldrb	r3, [r7, #1]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d003      	beq.n	80007de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007d6:	887a      	ldrh	r2, [r7, #2]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80007dc:	e003      	b.n	80007e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80007de:	887b      	ldrh	r3, [r7, #2]
 80007e0:	041a      	lsls	r2, r3, #16
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	619a      	str	r2, [r3, #24]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	887b      	ldrh	r3, [r7, #2]
 8000802:	4013      	ands	r3, r2
 8000804:	2b00      	cmp	r3, #0
 8000806:	d004      	beq.n	8000812 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000808:	887b      	ldrh	r3, [r7, #2]
 800080a:	041a      	lsls	r2, r3, #16
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000810:	e002      	b.n	8000818 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000812:	887a      	ldrh	r2, [r7, #2]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	619a      	str	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
	...

08000830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e31d      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000842:	4b94      	ldr	r3, [pc, #592]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f003 030c 	and.w	r3, r3, #12
 800084a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800084c:	4b91      	ldr	r3, [pc, #580]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000854:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	2b00      	cmp	r3, #0
 8000860:	d07b      	beq.n	800095a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	2b08      	cmp	r3, #8
 8000866:	d006      	beq.n	8000876 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	2b0c      	cmp	r3, #12
 800086c:	d10f      	bne.n	800088e <HAL_RCC_OscConfig+0x5e>
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000874:	d10b      	bne.n	800088e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000876:	4b87      	ldr	r3, [pc, #540]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	2b00      	cmp	r3, #0
 8000880:	d06a      	beq.n	8000958 <HAL_RCC_OscConfig+0x128>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d166      	bne.n	8000958 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e2f7      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d106      	bne.n	80008a4 <HAL_RCC_OscConfig+0x74>
 8000896:	4a7f      	ldr	r2, [pc, #508]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000898:	4b7e      	ldr	r3, [pc, #504]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a0:	6013      	str	r3, [r2, #0]
 80008a2:	e02d      	b.n	8000900 <HAL_RCC_OscConfig+0xd0>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d10c      	bne.n	80008c6 <HAL_RCC_OscConfig+0x96>
 80008ac:	4a79      	ldr	r2, [pc, #484]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008ae:	4b79      	ldr	r3, [pc, #484]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4a76      	ldr	r2, [pc, #472]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008ba:	4b76      	ldr	r3, [pc, #472]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	e01c      	b.n	8000900 <HAL_RCC_OscConfig+0xd0>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	d10c      	bne.n	80008e8 <HAL_RCC_OscConfig+0xb8>
 80008ce:	4a71      	ldr	r2, [pc, #452]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008d0:	4b70      	ldr	r3, [pc, #448]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	4a6e      	ldr	r2, [pc, #440]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008dc:	4b6d      	ldr	r3, [pc, #436]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e00b      	b.n	8000900 <HAL_RCC_OscConfig+0xd0>
 80008e8:	4a6a      	ldr	r2, [pc, #424]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008ea:	4b6a      	ldr	r3, [pc, #424]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4a67      	ldr	r2, [pc, #412]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008f6:	4b67      	ldr	r3, [pc, #412]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d013      	beq.n	8000930 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000908:	f7ff fcf8 	bl	80002fc <HAL_GetTick>
 800090c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800090e:	e008      	b.n	8000922 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000910:	f7ff fcf4 	bl	80002fc <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	2b64      	cmp	r3, #100	; 0x64
 800091c:	d901      	bls.n	8000922 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800091e:	2303      	movs	r3, #3
 8000920:	e2ad      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000922:	4b5c      	ldr	r3, [pc, #368]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092a:	2b00      	cmp	r3, #0
 800092c:	d0f0      	beq.n	8000910 <HAL_RCC_OscConfig+0xe0>
 800092e:	e014      	b.n	800095a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000930:	f7ff fce4 	bl	80002fc <HAL_GetTick>
 8000934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000936:	e008      	b.n	800094a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000938:	f7ff fce0 	bl	80002fc <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2b64      	cmp	r3, #100	; 0x64
 8000944:	d901      	bls.n	800094a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000946:	2303      	movs	r3, #3
 8000948:	e299      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800094a:	4b52      	ldr	r3, [pc, #328]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f0      	bne.n	8000938 <HAL_RCC_OscConfig+0x108>
 8000956:	e000      	b.n	800095a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d05a      	beq.n	8000a1c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	2b04      	cmp	r3, #4
 800096a:	d005      	beq.n	8000978 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	2b0c      	cmp	r3, #12
 8000970:	d119      	bne.n	80009a6 <HAL_RCC_OscConfig+0x176>
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d116      	bne.n	80009a6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000978:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d005      	beq.n	8000990 <HAL_RCC_OscConfig+0x160>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d001      	beq.n	8000990 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e276      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000990:	4940      	ldr	r1, [pc, #256]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000992:	4b40      	ldr	r3, [pc, #256]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	4313      	orrs	r3, r2
 80009a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a4:	e03a      	b.n	8000a1c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d020      	beq.n	80009f0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009ae:	4b3a      	ldr	r3, [pc, #232]	; (8000a98 <HAL_RCC_OscConfig+0x268>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b4:	f7ff fca2 	bl	80002fc <HAL_GetTick>
 80009b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80009ba:	e008      	b.n	80009ce <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009bc:	f7ff fc9e 	bl	80002fc <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d901      	bls.n	80009ce <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80009ca:	2303      	movs	r3, #3
 80009cc:	e257      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0f0      	beq.n	80009bc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009da:	492e      	ldr	r1, [pc, #184]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80009dc:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	691b      	ldr	r3, [r3, #16]
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	4313      	orrs	r3, r2
 80009ec:	604b      	str	r3, [r1, #4]
 80009ee:	e015      	b.n	8000a1c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <HAL_RCC_OscConfig+0x268>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009f6:	f7ff fc81 	bl	80002fc <HAL_GetTick>
 80009fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80009fc:	e008      	b.n	8000a10 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009fe:	f7ff fc7d 	bl	80002fc <HAL_GetTick>
 8000a02:	4602      	mov	r2, r0
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d901      	bls.n	8000a10 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	e236      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1f0      	bne.n	80009fe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 0310 	and.w	r3, r3, #16
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 80b8 	beq.w	8000b9a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d170      	bne.n	8000b12 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d005      	beq.n	8000a48 <HAL_RCC_OscConfig+0x218>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d101      	bne.n	8000a48 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	e21a      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6a1a      	ldr	r2, [r3, #32]
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d921      	bls.n	8000a9c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fbf1 	bl	8001244 <RCC_SetFlashLatencyFromMSIRange>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e208      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a6c:	4909      	ldr	r1, [pc, #36]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a1b      	ldr	r3, [r3, #32]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a7e:	4905      	ldr	r1, [pc, #20]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <HAL_RCC_OscConfig+0x264>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	061b      	lsls	r3, r3, #24
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	604b      	str	r3, [r1, #4]
 8000a92:	e020      	b.n	8000ad6 <HAL_RCC_OscConfig+0x2a6>
 8000a94:	40023800 	.word	0x40023800
 8000a98:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a9c:	49a4      	ldr	r1, [pc, #656]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000a9e:	4ba4      	ldr	r3, [pc, #656]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6a1b      	ldr	r3, [r3, #32]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000aae:	49a0      	ldr	r1, [pc, #640]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000ab0:	4b9f      	ldr	r3, [pc, #636]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	69db      	ldr	r3, [r3, #28]
 8000abc:	061b      	lsls	r3, r3, #24
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fbbc 	bl	8001244 <RCC_SetFlashLatencyFromMSIRange>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e1d3      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a1b      	ldr	r3, [r3, #32]
 8000ada:	0b5b      	lsrs	r3, r3, #13
 8000adc:	3301      	adds	r3, #1
 8000ade:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000ae6:	4a92      	ldr	r2, [pc, #584]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000ae8:	6892      	ldr	r2, [r2, #8]
 8000aea:	0912      	lsrs	r2, r2, #4
 8000aec:	f002 020f 	and.w	r2, r2, #15
 8000af0:	4990      	ldr	r1, [pc, #576]	; (8000d34 <HAL_RCC_OscConfig+0x504>)
 8000af2:	5c8a      	ldrb	r2, [r1, r2]
 8000af4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000af6:	4a90      	ldr	r2, [pc, #576]	; (8000d38 <HAL_RCC_OscConfig+0x508>)
 8000af8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000afa:	4b90      	ldr	r3, [pc, #576]	; (8000d3c <HAL_RCC_OscConfig+0x50c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fdc8 	bl	8001694 <HAL_InitTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d045      	beq.n	8000b9a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	e1b5      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d029      	beq.n	8000b6e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000b1a:	4b89      	ldr	r3, [pc, #548]	; (8000d40 <HAL_RCC_OscConfig+0x510>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b20:	f7ff fbec 	bl	80002fc <HAL_GetTick>
 8000b24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b26:	e008      	b.n	8000b3a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b28:	f7ff fbe8 	bl	80002fc <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d901      	bls.n	8000b3a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e1a1      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b3a:	4b7d      	ldr	r3, [pc, #500]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f0      	beq.n	8000b28 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b46:	497a      	ldr	r1, [pc, #488]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000b48:	4b79      	ldr	r3, [pc, #484]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b58:	4975      	ldr	r1, [pc, #468]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000b5a:	4b75      	ldr	r3, [pc, #468]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	061b      	lsls	r3, r3, #24
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
 8000b6c:	e015      	b.n	8000b9a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b6e:	4b74      	ldr	r3, [pc, #464]	; (8000d40 <HAL_RCC_OscConfig+0x510>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b74:	f7ff fbc2 	bl	80002fc <HAL_GetTick>
 8000b78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000b7a:	e008      	b.n	8000b8e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b7c:	f7ff fbbe 	bl	80002fc <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d901      	bls.n	8000b8e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e177      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000b8e:	4b68      	ldr	r3, [pc, #416]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f0      	bne.n	8000b7c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d030      	beq.n	8000c08 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d016      	beq.n	8000bdc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bae:	4b65      	ldr	r3, [pc, #404]	; (8000d44 <HAL_RCC_OscConfig+0x514>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb4:	f7ff fba2 	bl	80002fc <HAL_GetTick>
 8000bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000bba:	e008      	b.n	8000bce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bbc:	f7ff fb9e 	bl	80002fc <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d901      	bls.n	8000bce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e157      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000bce:	4b58      	ldr	r3, [pc, #352]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0f0      	beq.n	8000bbc <HAL_RCC_OscConfig+0x38c>
 8000bda:	e015      	b.n	8000c08 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bdc:	4b59      	ldr	r3, [pc, #356]	; (8000d44 <HAL_RCC_OscConfig+0x514>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be2:	f7ff fb8b 	bl	80002fc <HAL_GetTick>
 8000be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000be8:	e008      	b.n	8000bfc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bea:	f7ff fb87 	bl	80002fc <HAL_GetTick>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d901      	bls.n	8000bfc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e140      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000bfc:	4b4c      	ldr	r3, [pc, #304]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f0      	bne.n	8000bea <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f000 80b5 	beq.w	8000d80 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c1a:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10d      	bne.n	8000c42 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4a42      	ldr	r2, [pc, #264]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000c28:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6253      	str	r3, [r2, #36]	; 0x24
 8000c32:	4b3f      	ldr	r3, [pc, #252]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c42:	4b41      	ldr	r3, [pc, #260]	; (8000d48 <HAL_RCC_OscConfig+0x518>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d118      	bne.n	8000c80 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c4e:	4a3e      	ldr	r2, [pc, #248]	; (8000d48 <HAL_RCC_OscConfig+0x518>)
 8000c50:	4b3d      	ldr	r3, [pc, #244]	; (8000d48 <HAL_RCC_OscConfig+0x518>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c5a:	f7ff fb4f 	bl	80002fc <HAL_GetTick>
 8000c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c60:	e008      	b.n	8000c74 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c62:	f7ff fb4b 	bl	80002fc <HAL_GetTick>
 8000c66:	4602      	mov	r2, r0
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	2b64      	cmp	r3, #100	; 0x64
 8000c6e:	d901      	bls.n	8000c74 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e104      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c74:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <HAL_RCC_OscConfig+0x518>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0f0      	beq.n	8000c62 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d106      	bne.n	8000c96 <HAL_RCC_OscConfig+0x466>
 8000c88:	4a29      	ldr	r2, [pc, #164]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000c8a:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c92:	6353      	str	r3, [r2, #52]	; 0x34
 8000c94:	e02d      	b.n	8000cf2 <HAL_RCC_OscConfig+0x4c2>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10c      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x488>
 8000c9e:	4a24      	ldr	r2, [pc, #144]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca8:	6353      	str	r3, [r2, #52]	; 0x34
 8000caa:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000cac:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cb4:	6353      	str	r3, [r2, #52]	; 0x34
 8000cb6:	e01c      	b.n	8000cf2 <HAL_RCC_OscConfig+0x4c2>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	2b05      	cmp	r3, #5
 8000cbe:	d10c      	bne.n	8000cda <HAL_RCC_OscConfig+0x4aa>
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6353      	str	r3, [r2, #52]	; 0x34
 8000ccc:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6353      	str	r3, [r2, #52]	; 0x34
 8000cd8:	e00b      	b.n	8000cf2 <HAL_RCC_OscConfig+0x4c2>
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ce4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cf0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d015      	beq.n	8000d26 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfa:	f7ff faff 	bl	80002fc <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000d00:	e00a      	b.n	8000d18 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d02:	f7ff fafb 	bl	80002fc <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d901      	bls.n	8000d18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e0b2      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_RCC_OscConfig+0x500>)
 8000d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0ee      	beq.n	8000d02 <HAL_RCC_OscConfig+0x4d2>
 8000d24:	e023      	b.n	8000d6e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d26:	f7ff fae9 	bl	80002fc <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000d2c:	e019      	b.n	8000d62 <HAL_RCC_OscConfig+0x532>
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	08002eb8 	.word	0x08002eb8
 8000d38:	20000014 	.word	0x20000014
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	42470020 	.word	0x42470020
 8000d44:	42470680 	.word	0x42470680
 8000d48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fad6 	bl	80002fc <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e08d      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000d62:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <HAL_RCC_OscConfig+0x658>)
 8000d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1ee      	bne.n	8000d4c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d6e:	7ffb      	ldrb	r3, [r7, #31]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d105      	bne.n	8000d80 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d74:	4a44      	ldr	r2, [pc, #272]	; (8000e88 <HAL_RCC_OscConfig+0x658>)
 8000d76:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <HAL_RCC_OscConfig+0x658>)
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d079      	beq.n	8000e7c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b0c      	cmp	r3, #12
 8000d8c:	d056      	beq.n	8000e3c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d13b      	bne.n	8000e0e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <HAL_RCC_OscConfig+0x65c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff faae 	bl	80002fc <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000da4:	f7ff faaa 	bl	80002fc <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e063      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000db6:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <HAL_RCC_OscConfig+0x658>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f0      	bne.n	8000da4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dc2:	4831      	ldr	r0, [pc, #196]	; (8000e88 <HAL_RCC_OscConfig+0x658>)
 8000dc4:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <HAL_RCC_OscConfig+0x658>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd4:	4319      	orrs	r1, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	430b      	orrs	r3, r1
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	6083      	str	r3, [r0, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000de0:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <HAL_RCC_OscConfig+0x65c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de6:	f7ff fa89 	bl	80002fc <HAL_GetTick>
 8000dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000dec:	e008      	b.n	8000e00 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dee:	f7ff fa85 	bl	80002fc <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e03e      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <HAL_RCC_OscConfig+0x658>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f0      	beq.n	8000dee <HAL_RCC_OscConfig+0x5be>
 8000e0c:	e036      	b.n	8000e7c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <HAL_RCC_OscConfig+0x65c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fa72 	bl	80002fc <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e1c:	f7ff fa6e 	bl	80002fc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e027      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_RCC_OscConfig+0x658>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x5ec>
 8000e3a:	e01f      	b.n	8000e7c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e01a      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_RCC_OscConfig+0x658>)
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d10d      	bne.n	8000e78 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d106      	bne.n	8000e78 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d001      	beq.n	8000e7c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	42470060 	.word	0x42470060

08000e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d101      	bne.n	8000ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e11a      	b.n	80010da <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ea4:	4b8f      	ldr	r3, [pc, #572]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0201 	and.w	r2, r3, #1
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d219      	bcs.n	8000ee6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d105      	bne.n	8000ec4 <HAL_RCC_ClockConfig+0x34>
 8000eb8:	4a8a      	ldr	r2, [pc, #552]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8000eba:	4b8a      	ldr	r3, [pc, #552]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4987      	ldr	r1, [pc, #540]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8000ec6:	4b87      	ldr	r3, [pc, #540]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 0201 	bic.w	r2, r3, #1
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ed4:	4b83      	ldr	r3, [pc, #524]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0201 	and.w	r2, r3, #1
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d001      	beq.n	8000ee6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e0f9      	b.n	80010da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d008      	beq.n	8000f04 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ef2:	497d      	ldr	r1, [pc, #500]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8000ef4:	4b7c      	ldr	r3, [pc, #496]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 808e 	beq.w	800102e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d107      	bne.n	8000f2a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f1a:	4b73      	ldr	r3, [pc, #460]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d121      	bne.n	8000f6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e0d7      	b.n	80010da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d107      	bne.n	8000f42 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000f32:	4b6d      	ldr	r3, [pc, #436]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d115      	bne.n	8000f6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0cb      	b.n	80010da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d107      	bne.n	8000f5a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f4a:	4b67      	ldr	r3, [pc, #412]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d109      	bne.n	8000f6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e0bf      	b.n	80010da <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f5a:	4b63      	ldr	r3, [pc, #396]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e0b7      	b.n	80010da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f6a:	495f      	ldr	r1, [pc, #380]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8000f6c:	4b5e      	ldr	r3, [pc, #376]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f023 0203 	bic.w	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f7c:	f7ff f9be 	bl	80002fc <HAL_GetTick>
 8000f80:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d112      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f8a:	e00a      	b.n	8000fa2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f8c:	f7ff f9b6 	bl	80002fc <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e09b      	b.n	80010da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa2:	4b51      	ldr	r3, [pc, #324]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d1ee      	bne.n	8000f8c <HAL_RCC_ClockConfig+0xfc>
 8000fae:	e03e      	b.n	800102e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d112      	bne.n	8000fde <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb8:	e00a      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fba:	f7ff f99f 	bl	80002fc <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e084      	b.n	80010da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fd0:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 030c 	and.w	r3, r3, #12
 8000fd8:	2b0c      	cmp	r3, #12
 8000fda:	d1ee      	bne.n	8000fba <HAL_RCC_ClockConfig+0x12a>
 8000fdc:	e027      	b.n	800102e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d11d      	bne.n	8001022 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fe6:	e00a      	b.n	8000ffe <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe8:	f7ff f988 	bl	80002fc <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e06d      	b.n	80010da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ffe:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b04      	cmp	r3, #4
 8001008:	d1ee      	bne.n	8000fe8 <HAL_RCC_ClockConfig+0x158>
 800100a:	e010      	b.n	800102e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100c:	f7ff f976 	bl	80002fc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	f241 3288 	movw	r2, #5000	; 0x1388
 800101a:	4293      	cmp	r3, r2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e05b      	b.n	80010da <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001022:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1ee      	bne.n	800100c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800102e:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	d919      	bls.n	8001070 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d105      	bne.n	800104e <HAL_RCC_ClockConfig+0x1be>
 8001042:	4a28      	ldr	r2, [pc, #160]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4925      	ldr	r1, [pc, #148]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 0201 	bic.w	r2, r3, #1
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4313      	orrs	r3, r2
 800105c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_RCC_ClockConfig+0x254>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d001      	beq.n	8001070 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e034      	b.n	80010da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800107c:	491a      	ldr	r1, [pc, #104]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800109a:	4913      	ldr	r1, [pc, #76]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010ae:	f000 f823 	bl	80010f8 <HAL_RCC_GetSysClockFreq>
 80010b2:	4601      	mov	r1, r0
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_RCC_ClockConfig+0x258>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <HAL_RCC_ClockConfig+0x25c>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	fa21 f303 	lsr.w	r3, r1, r3
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_RCC_ClockConfig+0x260>)
 80010c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_RCC_ClockConfig+0x264>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fae0 	bl	8001694 <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80010d8:	7afb      	ldrb	r3, [r7, #11]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00
 80010e8:	40023800 	.word	0x40023800
 80010ec:	08002eb8 	.word	0x08002eb8
 80010f0:	20000014 	.word	0x20000014
 80010f4:	20000008 	.word	0x20000008

080010f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b08      	cmp	r3, #8
 800110c:	d006      	beq.n	800111c <HAL_RCC_GetSysClockFreq+0x24>
 800110e:	2b0c      	cmp	r3, #12
 8001110:	d007      	beq.n	8001122 <HAL_RCC_GetSysClockFreq+0x2a>
 8001112:	2b04      	cmp	r3, #4
 8001114:	d12c      	bne.n	8001170 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001118:	613b      	str	r3, [r7, #16]
      break;
 800111a:	e037      	b.n	800118c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800111c:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800111e:	613b      	str	r3, [r7, #16]
      break;
 8001120:	e034      	b.n	800118c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	0c9b      	lsrs	r3, r3, #18
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xac>)
 800112c:	5cd3      	ldrb	r3, [r2, r3]
 800112e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	0d9b      	lsrs	r3, r3, #22
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	3301      	adds	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_RCC_GetSysClockFreq+0xa0>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800114c:	fb02 f203 	mul.w	r2, r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e007      	b.n	800116a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_RCC_GetSysClockFreq+0xa4>)
 800115e:	fb02 f203 	mul.w	r2, r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	fbb2 f3f3 	udiv	r3, r2, r3
 8001168:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	613b      	str	r3, [r7, #16]
      break;
 800116e:	e00d      	b.n	800118c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	0b5b      	lsrs	r3, r3, #13
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	613b      	str	r3, [r7, #16]
      break;
 800118a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800118c:	693b      	ldr	r3, [r7, #16]
}
 800118e:	4618      	mov	r0, r3
 8001190:	371c      	adds	r7, #28
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40023800 	.word	0x40023800
 800119c:	00f42400 	.word	0x00f42400
 80011a0:	007a1200 	.word	0x007a1200
 80011a4:	08002eac 	.word	0x08002eac

080011a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	20000014 	.word	0x20000014

080011bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011c0:	f7ff fff2 	bl	80011a8 <HAL_RCC_GetHCLKFreq>
 80011c4:	4601      	mov	r1, r0
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011d2:	5cd3      	ldrb	r3, [r2, r3]
 80011d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	08002ec8 	.word	0x08002ec8

080011e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	220f      	movs	r2, #15
 80011f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_RCC_GetClockConfig+0x58>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0203 	and.w	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_RCC_GetClockConfig+0x58>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_RCC_GetClockConfig+0x58>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_RCC_GetClockConfig+0x58>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_RCC_GetClockConfig+0x5c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	601a      	str	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40023800 	.word	0x40023800
 8001240:	40023c00 	.word	0x40023c00

08001244 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d12c      	bne.n	80012b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e016      	b.n	80012a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127e:	6253      	str	r3, [r2, #36]	; 0x24
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001294:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80012a8:	d105      	bne.n	80012b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80012b0:	d101      	bne.n	80012b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80012b2:	2301      	movs	r3, #1
 80012b4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d105      	bne.n	80012c8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80012bc:	4a10      	ldr	r2, [pc, #64]	; (8001300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	490d      	ldr	r1, [pc, #52]	; (8001300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 0201 	bic.w	r2, r3, #1
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0201 	and.w	r2, r3, #1
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d001      	beq.n	80012ea <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000
 8001300:	40023c00 	.word	0x40023c00

08001304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e01d      	b.n	8001352 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f815 	bl	800135a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2202      	movs	r2, #2
 8001334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3304      	adds	r3, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4610      	mov	r0, r2
 8001344:	f000 f936 	bl	80015b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	68d2      	ldr	r2, [r2, #12]
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b06      	cmp	r3, #6
 8001394:	d007      	beq.n	80013a6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	f042 0201 	orr.w	r2, r2, #1
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d122      	bne.n	800140e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d11b      	bne.n	800140e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f06f 0202 	mvn.w	r2, #2
 80013de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f8c1 	bl	800157c <HAL_TIM_IC_CaptureCallback>
 80013fa:	e005      	b.n	8001408 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f8b4 	bl	800156a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f8c3 	bl	800158e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b04      	cmp	r3, #4
 800141a:	d122      	bne.n	8001462 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b04      	cmp	r3, #4
 8001428:	d11b      	bne.n	8001462 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f06f 0204 	mvn.w	r2, #4
 8001432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f897 	bl	800157c <HAL_TIM_IC_CaptureCallback>
 800144e:	e005      	b.n	800145c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f88a 	bl	800156a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f899 	bl	800158e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b08      	cmp	r3, #8
 800146e:	d122      	bne.n	80014b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b08      	cmp	r3, #8
 800147c:	d11b      	bne.n	80014b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f06f 0208 	mvn.w	r2, #8
 8001486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2204      	movs	r2, #4
 800148c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f86d 	bl	800157c <HAL_TIM_IC_CaptureCallback>
 80014a2:	e005      	b.n	80014b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f860 	bl	800156a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f86f 	bl	800158e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b10      	cmp	r3, #16
 80014c2:	d122      	bne.n	800150a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d11b      	bne.n	800150a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f06f 0210 	mvn.w	r2, #16
 80014da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2208      	movs	r2, #8
 80014e0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f843 	bl	800157c <HAL_TIM_IC_CaptureCallback>
 80014f6:	e005      	b.n	8001504 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f836 	bl	800156a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f845 	bl	800158e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b01      	cmp	r3, #1
 8001516:	d10e      	bne.n	8001536 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f06f 0201 	mvn.w	r2, #1
 800152e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f911 	bl	8001758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001540:	2b40      	cmp	r3, #64	; 0x40
 8001542:	d10e      	bne.n	8001562 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154e:	2b40      	cmp	r3, #64	; 0x40
 8001550:	d107      	bne.n	8001562 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800155a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f81f 	bl	80015a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
	...

080015b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ca:	d00f      	beq.n	80015ec <TIM_Base_SetConfig+0x38>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a2b      	ldr	r2, [pc, #172]	; (800167c <TIM_Base_SetConfig+0xc8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d00b      	beq.n	80015ec <TIM_Base_SetConfig+0x38>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a2a      	ldr	r2, [pc, #168]	; (8001680 <TIM_Base_SetConfig+0xcc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d007      	beq.n	80015ec <TIM_Base_SetConfig+0x38>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a29      	ldr	r2, [pc, #164]	; (8001684 <TIM_Base_SetConfig+0xd0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d003      	beq.n	80015ec <TIM_Base_SetConfig+0x38>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a28      	ldr	r2, [pc, #160]	; (8001688 <TIM_Base_SetConfig+0xd4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d108      	bne.n	80015fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001604:	d017      	beq.n	8001636 <TIM_Base_SetConfig+0x82>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a1c      	ldr	r2, [pc, #112]	; (800167c <TIM_Base_SetConfig+0xc8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <TIM_Base_SetConfig+0x82>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <TIM_Base_SetConfig+0xcc>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00f      	beq.n	8001636 <TIM_Base_SetConfig+0x82>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <TIM_Base_SetConfig+0xd0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00b      	beq.n	8001636 <TIM_Base_SetConfig+0x82>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <TIM_Base_SetConfig+0xd4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <TIM_Base_SetConfig+0x82>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a18      	ldr	r2, [pc, #96]	; (800168c <TIM_Base_SetConfig+0xd8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d003      	beq.n	8001636 <TIM_Base_SetConfig+0x82>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a17      	ldr	r2, [pc, #92]	; (8001690 <TIM_Base_SetConfig+0xdc>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d108      	bne.n	8001648 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800163c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	615a      	str	r2, [r3, #20]
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40000400 	.word	0x40000400
 8001680:	40000800 	.word	0x40000800
 8001684:	40000c00 	.word	0x40000c00
 8001688:	40010800 	.word	0x40010800
 800168c:	40010c00 	.word	0x40010c00
 8001690:	40011000 	.word	0x40011000

08001694 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
  /* Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	202b      	movs	r0, #43	; 0x2b
 80016aa:	f7fe fee0 	bl	800046e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80016ae:	202b      	movs	r0, #43	; 0x2b
 80016b0:	f7fe fef9 	bl	80004a6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016b4:	4a24      	ldr	r2, [pc, #144]	; (8001748 <HAL_InitTick+0xb4>)
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_InitTick+0xb4>)
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6253      	str	r3, [r2, #36]	; 0x24
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_InitTick+0xb4>)
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016cc:	f107 020c 	add.w	r2, r7, #12
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fd84 	bl	80011e4 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d103      	bne.n	80016ee <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016e6:	f7ff fd69 	bl	80011bc <HAL_RCC_GetPCLK1Freq>
 80016ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80016ec:	e004      	b.n	80016f8 <HAL_InitTick+0x64>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80016ee:	f7ff fd65 	bl	80011bc <HAL_RCC_GetPCLK1Freq>
 80016f2:	4603      	mov	r3, r0
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_InitTick+0xb8>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	0c9b      	lsrs	r3, r3, #18
 8001702:	3b01      	subs	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_InitTick+0xbc>)
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <HAL_InitTick+0xc0>)
 800170a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_InitTick+0xbc>)
 800170e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001712:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8001714:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <HAL_InitTick+0xbc>)
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0U;
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_InitTick+0xbc>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_InitTick+0xbc>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001726:	480a      	ldr	r0, [pc, #40]	; (8001750 <HAL_InitTick+0xbc>)
 8001728:	f7ff fdec 	bl	8001304 <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d104      	bne.n	800173c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <HAL_InitTick+0xbc>)
 8001734:	f7ff fe1a 	bl	800136c <HAL_TIM_Base_Start_IT>
 8001738:	4603      	mov	r3, r0
 800173a:	e000      	b.n	800173e <HAL_InitTick+0xaa>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
}
 800173e:	4618      	mov	r0, r3
 8001740:	3730      	adds	r7, #48	; 0x30
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	431bde83 	.word	0x431bde83
 8001750:	20000974 	.word	0x20000974
 8001754:	40001000 	.word	0x40001000

08001758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim  TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8001760:	f7fe fdba 	bl	80002d8 <HAL_IncTick>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <TIM6_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <TIM6_IRQHandler+0x10>)
 8001772:	f7ff fe1e 	bl	80013b2 <HAL_TIM_IRQHandler>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000974 	.word	0x20000974

08001780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f103 0208 	add.w	r2, r3, #8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f103 0208 	add.w	r2, r3, #8
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f103 0208 	add.w	r2, r3, #8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	601a      	str	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001832:	d103      	bne.n	800183c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e00c      	b.n	8001856 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3308      	adds	r3, #8
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	e002      	b.n	800184a <vListInsert+0x2e>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	429a      	cmp	r2, r3
 8001854:	d9f6      	bls.n	8001844 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6892      	ldr	r2, [r2, #8]
 80018a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6852      	ldr	r2, [r2, #4]
 80018ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d103      	bne.n	80018c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1e5a      	subs	r2, r3, #1
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
	...

080018e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3b04      	subs	r3, #4
 80018f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3b04      	subs	r3, #4
 80018fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f023 0201 	bic.w	r2, r3, #1
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3b04      	subs	r3, #4
 800190e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001910:	4a08      	ldr	r2, [pc, #32]	; (8001934 <pxPortInitialiseStack+0x54>)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3b14      	subs	r3, #20
 800191a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	3b20      	subs	r3, #32
 8001926:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001928:	68fb      	ldr	r3, [r7, #12]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	08001939 	.word	0x08001939

08001938 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <prvTaskExitError+0x4c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194a:	d009      	beq.n	8001960 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800194c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001950:	f383 8811 	msr	BASEPRI, r3
 8001954:	f3bf 8f6f 	isb	sy
 8001958:	f3bf 8f4f 	dsb	sy
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e7fe      	b.n	800195e <prvTaskExitError+0x26>
 8001960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001964:	f383 8811 	msr	BASEPRI, r3
 8001968:	f3bf 8f6f 	isb	sy
 800196c:	f3bf 8f4f 	dsb	sy
 8001970:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001972:	bf00      	nop
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0fc      	beq.n	8001974 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000010 	.word	0x20000010
	...

08001990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <pxCurrentTCBConst2>)
 8001992:	6819      	ldr	r1, [r3, #0]
 8001994:	6808      	ldr	r0, [r1, #0]
 8001996:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800199a:	f380 8809 	msr	PSP, r0
 800199e:	f3bf 8f6f 	isb	sy
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f380 8811 	msr	BASEPRI, r0
 80019aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80019ae:	4770      	bx	lr

080019b0 <pxCurrentTCBConst2>:
 80019b0:	20000844 	.word	0x20000844
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop

080019b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <prvPortStartFirstTask+0x1c>)
 80019ba:	6800      	ldr	r0, [r0, #0]
 80019bc:	6800      	ldr	r0, [r0, #0]
 80019be:	f380 8808 	msr	MSP, r0
 80019c2:	b662      	cpsie	i
 80019c4:	b661      	cpsie	f
 80019c6:	f3bf 8f4f 	dsb	sy
 80019ca:	f3bf 8f6f 	isb	sy
 80019ce:	df00      	svc	0
 80019d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80019d2:	bf00      	nop
 80019d4:	e000ed08 	.word	0xe000ed08

080019d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <xPortStartScheduler+0xcc>)
 80019e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	22ff      	movs	r2, #255	; 0xff
 80019ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <xPortStartScheduler+0xd0>)
 8001a04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001a06:	4b29      	ldr	r3, [pc, #164]	; (8001aac <xPortStartScheduler+0xd4>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001a0c:	e009      	b.n	8001a22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8001a0e:	4b27      	ldr	r3, [pc, #156]	; (8001aac <xPortStartScheduler+0xd4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	4a25      	ldr	r2, [pc, #148]	; (8001aac <xPortStartScheduler+0xd4>)
 8001a16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2a:	2b80      	cmp	r3, #128	; 0x80
 8001a2c:	d0ef      	beq.n	8001a0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <xPortStartScheduler+0xd4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d009      	beq.n	8001a4e <xPortStartScheduler+0x76>
 8001a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a3e:	f383 8811 	msr	BASEPRI, r3
 8001a42:	f3bf 8f6f 	isb	sy
 8001a46:	f3bf 8f4f 	dsb	sy
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	e7fe      	b.n	8001a4c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <xPortStartScheduler+0xd4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <xPortStartScheduler+0xd4>)
 8001a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <xPortStartScheduler+0xd4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <xPortStartScheduler+0xd4>)
 8001a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001a6c:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <xPortStartScheduler+0xd8>)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <xPortStartScheduler+0xd8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <xPortStartScheduler+0xd8>)
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <xPortStartScheduler+0xd8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001a84:	f000 f8b0 	bl	8001be8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <xPortStartScheduler+0xdc>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001a8e:	f7ff ff93 	bl	80019b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001a92:	f000 fe29 	bl	80026e8 <vTaskSwitchContext>
	prvTaskExitError();
 8001a96:	f7ff ff4f 	bl	8001938 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	e000e400 	.word	0xe000e400
 8001aa8:	20000034 	.word	0x20000034
 8001aac:	20000038 	.word	0x20000038
 8001ab0:	e000ed20 	.word	0xe000ed20
 8001ab4:	20000010 	.word	0x20000010

08001ab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac2:	f383 8811 	msr	BASEPRI, r3
 8001ac6:	f3bf 8f6f 	isb	sy
 8001aca:	f3bf 8f4f 	dsb	sy
 8001ace:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <vPortEnterCritical+0x54>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <vPortEnterCritical+0x54>)
 8001ad8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <vPortEnterCritical+0x54>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d10e      	bne.n	8001b00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <vPortEnterCritical+0x58>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <vPortEnterCritical+0x48>
 8001aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af0:	f383 8811 	msr	BASEPRI, r3
 8001af4:	f3bf 8f6f 	isb	sy
 8001af8:	f3bf 8f4f 	dsb	sy
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	e7fe      	b.n	8001afe <vPortEnterCritical+0x46>
	}
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	e000ed04 	.word	0xe000ed04

08001b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <vPortExitCritical+0x48>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <vPortExitCritical+0x22>
 8001b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b26:	f383 8811 	msr	BASEPRI, r3
 8001b2a:	f3bf 8f6f 	isb	sy
 8001b2e:	f3bf 8f4f 	dsb	sy
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	e7fe      	b.n	8001b34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <vPortExitCritical+0x48>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <vPortExitCritical+0x48>)
 8001b3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <vPortExitCritical+0x48>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d104      	bne.n	8001b52 <vPortExitCritical+0x3e>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	20000010 	.word	0x20000010

08001b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001b60:	f3ef 8009 	mrs	r0, PSP
 8001b64:	f3bf 8f6f 	isb	sy
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <pxCurrentTCBConst>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b70:	6010      	str	r0, [r2, #0]
 8001b72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001b76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b7a:	f380 8811 	msr	BASEPRI, r0
 8001b7e:	f000 fdb3 	bl	80026e8 <vTaskSwitchContext>
 8001b82:	f04f 0000 	mov.w	r0, #0
 8001b86:	f380 8811 	msr	BASEPRI, r0
 8001b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	6808      	ldr	r0, [r1, #0]
 8001b92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b96:	f380 8809 	msr	PSP, r0
 8001b9a:	f3bf 8f6f 	isb	sy
 8001b9e:	4770      	bx	lr

08001ba0 <pxCurrentTCBConst>:
 8001ba0:	20000844 	.word	0x20000844
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop

08001ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
	__asm volatile
 8001bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb2:	f383 8811 	msr	BASEPRI, r3
 8001bb6:	f3bf 8f6f 	isb	sy
 8001bba:	f3bf 8f4f 	dsb	sy
 8001bbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001bc0:	f000 fcda 	bl	8002578 <xTaskIncrementTick>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <SysTick_Handler+0x3c>)
 8001bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	e000ed04 	.word	0xe000ed04

08001be8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <vPortSetupTimerInterrupt+0x30>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <vPortSetupTimerInterrupt+0x34>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001bf8:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <vPortSetupTimerInterrupt+0x38>)
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <vPortSetupTimerInterrupt+0x3c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	490a      	ldr	r1, [pc, #40]	; (8001c28 <vPortSetupTimerInterrupt+0x40>)
 8001c00:	fba1 1303 	umull	r1, r3, r1, r3
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	3b01      	subs	r3, #1
 8001c08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001c0a:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <vPortSetupTimerInterrupt+0x30>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	e000e010 	.word	0xe000e010
 8001c1c:	e000e018 	.word	0xe000e018
 8001c20:	e000e014 	.word	0xe000e014
 8001c24:	20000014 	.word	0x20000014
 8001c28:	10624dd3 	.word	0x10624dd3

08001c2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001c32:	f3ef 8305 	mrs	r3, IPSR
 8001c36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b0f      	cmp	r3, #15
 8001c3c:	d913      	bls.n	8001c66 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001c3e:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <vPortValidateInterruptPriority+0x68>)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <vPortValidateInterruptPriority+0x6c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	7afa      	ldrb	r2, [r7, #11]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d209      	bcs.n	8001c66 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c56:	f383 8811 	msr	BASEPRI, r3
 8001c5a:	f3bf 8f6f 	isb	sy
 8001c5e:	f3bf 8f4f 	dsb	sy
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	e7fe      	b.n	8001c64 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <vPortValidateInterruptPriority+0x70>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <vPortValidateInterruptPriority+0x74>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d909      	bls.n	8001c8a <vPortValidateInterruptPriority+0x5e>
 8001c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7a:	f383 8811 	msr	BASEPRI, r3
 8001c7e:	f3bf 8f6f 	isb	sy
 8001c82:	f3bf 8f4f 	dsb	sy
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	e7fe      	b.n	8001c88 <vPortValidateInterruptPriority+0x5c>
	}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	e000e3f0 	.word	0xe000e3f0
 8001c98:	20000034 	.word	0x20000034
 8001c9c:	e000ed0c 	.word	0xe000ed0c
 8001ca0:	20000038 	.word	0x20000038

08001ca4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f023 0307 	bic.w	r3, r3, #7
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8001cc4:	f000 fb8e 	bl	80023e4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <pvPortMalloc+0x7c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <pvPortMalloc+0x80>)
 8001cd2:	f023 0307 	bic.w	r3, r3, #7
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <pvPortMalloc+0x7c>)
 8001cda:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <pvPortMalloc+0x84>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8001ce8:	d213      	bcs.n	8001d12 <pvPortMalloc+0x6e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <pvPortMalloc+0x84>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	441a      	add	r2, r3
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <pvPortMalloc+0x84>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d90b      	bls.n	8001d12 <pvPortMalloc+0x6e>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <pvPortMalloc+0x7c>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <pvPortMalloc+0x84>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <pvPortMalloc+0x84>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <pvPortMalloc+0x84>)
 8001d10:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001d12:	f000 fb75 	bl	8002400 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000840 	.word	0x20000840
 8001d24:	20000044 	.word	0x20000044
 8001d28:	2000083c 	.word	0x2000083c

08001d2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <vPortFree+0x22>
 8001d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3e:	f383 8811 	msr	BASEPRI, r3
 8001d42:	f3bf 8f6f 	isb	sy
 8001d46:	f3bf 8f4f 	dsb	sy
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	e7fe      	b.n	8001d4c <vPortFree+0x20>
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08c      	sub	sp, #48	; 0x30
 8001d5c:	af04      	add	r7, sp, #16
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff99 	bl	8001ca4 <pvPortMalloc>
 8001d72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00e      	beq.n	8001d98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001d7a:	205c      	movs	r0, #92	; 0x5c
 8001d7c:	f7ff ff92 	bl	8001ca4 <pvPortMalloc>
 8001d80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d8e:	e005      	b.n	8001d9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001d90:	6978      	ldr	r0, [r7, #20]
 8001d92:	f7ff ffcb 	bl	8001d2c <vPortFree>
 8001d96:	e001      	b.n	8001d9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d013      	beq.n	8001dca <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001da2:	88fa      	ldrh	r2, [r7, #6]
 8001da4:	2300      	movs	r3, #0
 8001da6:	9303      	str	r3, [sp, #12]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	9302      	str	r3, [sp, #8]
 8001dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f80e 	bl	8001dda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001dbe:	69f8      	ldr	r0, [r7, #28]
 8001dc0:	f000 f89a 	bl	8001ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	e002      	b.n	8001dd0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001dd0:	69bb      	ldr	r3, [r7, #24]
	}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b088      	sub	sp, #32
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	461a      	mov	r2, r3
 8001df2:	21a5      	movs	r1, #165	; 0xa5
 8001df4:	f001 f824 	bl	8002e40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e02:	3b01      	subs	r3, #1
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f023 0307 	bic.w	r3, r3, #7
 8001e10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <prvInitialiseNewTask+0x56>
 8001e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	f3bf 8f6f 	isb	sy
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e7fe      	b.n	8001e2e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d01f      	beq.n	8001e76 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e012      	b.n	8001e62 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	7819      	ldrb	r1, [r3, #0]
 8001e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	3334      	adds	r3, #52	; 0x34
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	4413      	add	r3, r2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	2b0f      	cmp	r3, #15
 8001e66:	d9e9      	bls.n	8001e3c <prvInitialiseNewTask+0x62>
 8001e68:	e000      	b.n	8001e6c <prvInitialiseNewTask+0x92>
			{
				break;
 8001e6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e74:	e003      	b.n	8001e7e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e80:	2b06      	cmp	r3, #6
 8001e82:	d901      	bls.n	8001e88 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e84:	2306      	movs	r3, #6
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e96:	2200      	movs	r2, #0
 8001e98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fc8d 	bl	80017be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fc88 	bl	80017be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	f1c3 0207 	rsb	r2, r3, #7
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	69b8      	ldr	r0, [r7, #24]
 8001ed8:	f7ff fd02 	bl	80018e0 <pxPortInitialiseStack>
 8001edc:	4602      	mov	r2, r0
 8001ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001f00:	f7ff fdda 	bl	8001ab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <prvAddNewTaskToReadyList+0xc0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	4a2b      	ldr	r2, [pc, #172]	; (8001fb8 <prvAddNewTaskToReadyList+0xc0>)
 8001f0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <prvAddNewTaskToReadyList+0xc4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001f16:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <prvAddNewTaskToReadyList+0xc4>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <prvAddNewTaskToReadyList+0xc0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d110      	bne.n	8001f46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001f24:	f000 fc52 	bl	80027cc <prvInitialiseTaskLists>
 8001f28:	e00d      	b.n	8001f46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001f2a:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <prvAddNewTaskToReadyList+0xc8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <prvAddNewTaskToReadyList+0xc4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d802      	bhi.n	8001f46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001f40:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <prvAddNewTaskToReadyList+0xc4>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <prvAddNewTaskToReadyList+0xcc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <prvAddNewTaskToReadyList+0xcc>)
 8001f4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <prvAddNewTaskToReadyList+0xcc>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <prvAddNewTaskToReadyList+0xd0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <prvAddNewTaskToReadyList+0xd0>)
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <prvAddNewTaskToReadyList+0xd4>)
 8001f78:	441a      	add	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4610      	mov	r0, r2
 8001f82:	f7ff fc28 	bl	80017d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001f86:	f7ff fdc5 	bl	8001b14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <prvAddNewTaskToReadyList+0xc8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00e      	beq.n	8001fb0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <prvAddNewTaskToReadyList+0xc4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <prvAddNewTaskToReadyList+0xd8>)
 8001fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000944 	.word	0x20000944
 8001fbc:	20000844 	.word	0x20000844
 8001fc0:	20000950 	.word	0x20000950
 8001fc4:	20000960 	.word	0x20000960
 8001fc8:	2000094c 	.word	0x2000094c
 8001fcc:	20000848 	.word	0x20000848
 8001fd0:	e000ed04 	.word	0xe000ed04

08001fd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d016      	beq.n	8002014 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <vTaskDelay+0x60>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <vTaskDelay+0x2e>
 8001fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	e7fe      	b.n	8002000 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002002:	f000 f9ef 	bl	80023e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002006:	2100      	movs	r1, #0
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fc7b 	bl	8002904 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800200e:	f000 f9f7 	bl	8002400 <xTaskResumeAll>
 8002012:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d107      	bne.n	800202a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <vTaskDelay+0x64>)
 800201c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f3bf 8f4f 	dsb	sy
 8002026:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000096c 	.word	0x2000096c
 8002038:	e000ed04 	.word	0xe000ed04

0800203c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002044:	f7ff fd38 	bl	8001ab8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <vTaskSuspend+0x18>
 800204e:	4b3c      	ldr	r3, [pc, #240]	; (8002140 <vTaskSuspend+0x104>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	e000      	b.n	8002056 <vTaskSuspend+0x1a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3304      	adds	r3, #4
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fc15 	bl	800188c <uxListRemove>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d115      	bne.n	8002094 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206c:	4935      	ldr	r1, [pc, #212]	; (8002144 <vTaskSuspend+0x108>)
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10a      	bne.n	8002094 <vTaskSuspend+0x58>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	2201      	movs	r2, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43da      	mvns	r2, r3
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <vTaskSuspend+0x10c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4013      	ands	r3, r2
 8002090:	4a2d      	ldr	r2, [pc, #180]	; (8002148 <vTaskSuspend+0x10c>)
 8002092:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3318      	adds	r3, #24
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fbf3 	bl	800188c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	3304      	adds	r3, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4827      	ldr	r0, [pc, #156]	; (800214c <vTaskSuspend+0x110>)
 80020ae:	f7ff fb92 	bl	80017d6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d103      	bne.n	80020c6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80020c6:	f7ff fd25 	bl	8001b14 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <vTaskSuspend+0x114>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80020d2:	f7ff fcf1 	bl	8001ab8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80020d6:	f000 fbf5 	bl	80028c4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80020da:	f7ff fd1b 	bl	8001b14 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <vTaskSuspend+0x104>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d126      	bne.n	8002136 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <vTaskSuspend+0x114>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d016      	beq.n	800211e <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <vTaskSuspend+0x118>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <vTaskSuspend+0xd0>
 80020f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fc:	f383 8811 	msr	BASEPRI, r3
 8002100:	f3bf 8f6f 	isb	sy
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	e7fe      	b.n	800210a <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <vTaskSuspend+0x11c>)
 800210e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800211c:	e00b      	b.n	8002136 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <vTaskSuspend+0x110>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <vTaskSuspend+0x120>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d103      	bne.n	8002132 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <vTaskSuspend+0x104>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
	}
 8002130:	e001      	b.n	8002136 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8002132:	f000 fad9 	bl	80026e8 <vTaskSwitchContext>
	}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000844 	.word	0x20000844
 8002144:	20000848 	.word	0x20000848
 8002148:	2000094c 	.word	0x2000094c
 800214c:	20000930 	.word	0x20000930
 8002150:	20000950 	.word	0x20000950
 8002154:	2000096c 	.word	0x2000096c
 8002158:	e000ed04 	.word	0xe000ed04
 800215c:	20000944 	.word	0x20000944

08002160 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <prvTaskIsTaskSuspended+0x2a>
 8002176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	e7fe      	b.n	8002188 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <prvTaskIsTaskSuspended+0x58>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d10a      	bne.n	80021aa <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	4a08      	ldr	r2, [pc, #32]	; (80021bc <prvTaskIsTaskSuspended+0x5c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d005      	beq.n	80021aa <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80021aa:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80021ac:	4618      	mov	r0, r3
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000930 	.word	0x20000930
 80021bc:	20000904 	.word	0x20000904

080021c0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <vTaskResume+0x26>
 80021d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	e7fe      	b.n	80021e4 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <vTaskResume+0xa8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d037      	beq.n	8002260 <vTaskResume+0xa0>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d034      	beq.n	8002260 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 80021f6:	f7ff fc5f 	bl	8001ab8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff ffb0 	bl	8002160 <prvTaskIsTaskSuspended>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d02a      	beq.n	800225c <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3304      	adds	r3, #4
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fb3e 	bl	800188c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	2201      	movs	r2, #1
 8002216:	409a      	lsls	r2, r3
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <vTaskResume+0xac>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4313      	orrs	r3, r2
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <vTaskResume+0xac>)
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4a10      	ldr	r2, [pc, #64]	; (8002270 <vTaskResume+0xb0>)
 8002230:	441a      	add	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3304      	adds	r3, #4
 8002236:	4619      	mov	r1, r3
 8002238:	4610      	mov	r0, r2
 800223a:	f7ff facc 	bl	80017d6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <vTaskResume+0xa8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	429a      	cmp	r2, r3
 800224a:	d307      	bcc.n	800225c <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <vTaskResume+0xb4>)
 800224e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800225c:	f7ff fc5a 	bl	8001b14 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000844 	.word	0x20000844
 800226c:	2000094c 	.word	0x2000094c
 8002270:	20000848 	.word	0x20000848
 8002274:	e000ed04 	.word	0xe000ed04

08002278 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <xTaskResumeFromISR+0x2a>
 800228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e7fe      	b.n	80022a0 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022a2:	f7ff fcc3 	bl	8001c2c <vPortValidateInterruptPriority>
	__asm volatile
 80022a6:	f3ef 8211 	mrs	r2, BASEPRI
 80022aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ae:	f383 8811 	msr	BASEPRI, r3
 80022b2:	f3bf 8f6f 	isb	sy
 80022b6:	f3bf 8f4f 	dsb	sy
 80022ba:	617a      	str	r2, [r7, #20]
 80022bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80022be:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80022c0:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80022c2:	6a38      	ldr	r0, [r7, #32]
 80022c4:	f7ff ff4c 	bl	8002160 <prvTaskIsTaskSuspended>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d02f      	beq.n	800232e <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <xTaskResumeFromISR+0xcc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d125      	bne.n	8002322 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <xTaskResumeFromISR+0xd0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d301      	bcc.n	80022e8 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 80022e4:	2301      	movs	r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff facd 	bl	800188c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	2201      	movs	r2, #1
 80022f8:	409a      	lsls	r2, r3
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <xTaskResumeFromISR+0xd4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	4a12      	ldr	r2, [pc, #72]	; (800234c <xTaskResumeFromISR+0xd4>)
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <xTaskResumeFromISR+0xd8>)
 8002312:	441a      	add	r2, r3
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	3304      	adds	r3, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f7ff fa5b 	bl	80017d6 <vListInsertEnd>
 8002320:	e005      	b.n	800232e <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	3318      	adds	r3, #24
 8002326:	4619      	mov	r1, r3
 8002328:	480a      	ldr	r0, [pc, #40]	; (8002354 <xTaskResumeFromISR+0xdc>)
 800232a:	f7ff fa54 	bl	80017d6 <vListInsertEnd>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800233a:	4618      	mov	r0, r3
 800233c:	3728      	adds	r7, #40	; 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000096c 	.word	0x2000096c
 8002348:	20000844 	.word	0x20000844
 800234c:	2000094c 	.word	0x2000094c
 8002350:	20000848 	.word	0x20000848
 8002354:	20000904 	.word	0x20000904

08002358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <vTaskStartScheduler+0x74>)
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	2300      	movs	r3, #0
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2300      	movs	r3, #0
 8002368:	2280      	movs	r2, #128	; 0x80
 800236a:	4919      	ldr	r1, [pc, #100]	; (80023d0 <vTaskStartScheduler+0x78>)
 800236c:	4819      	ldr	r0, [pc, #100]	; (80023d4 <vTaskStartScheduler+0x7c>)
 800236e:	f7ff fcf3 	bl	8001d58 <xTaskCreate>
 8002372:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d115      	bne.n	80023a6 <vTaskStartScheduler+0x4e>
	__asm volatile
 800237a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237e:	f383 8811 	msr	BASEPRI, r3
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <vTaskStartScheduler+0x80>)
 800238e:	f04f 32ff 	mov.w	r2, #4294967295
 8002392:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <vTaskStartScheduler+0x84>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <vTaskStartScheduler+0x88>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80023a0:	f7ff fb1a 	bl	80019d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80023a4:	e00d      	b.n	80023c2 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d109      	bne.n	80023c2 <vTaskStartScheduler+0x6a>
 80023ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	e7fe      	b.n	80023c0 <vTaskStartScheduler+0x68>
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000968 	.word	0x20000968
 80023d0:	08002e68 	.word	0x08002e68
 80023d4:	0800279d 	.word	0x0800279d
 80023d8:	20000964 	.word	0x20000964
 80023dc:	20000950 	.word	0x20000950
 80023e0:	20000948 	.word	0x20000948

080023e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <vTaskSuspendAll+0x18>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a03      	ldr	r2, [pc, #12]	; (80023fc <vTaskSuspendAll+0x18>)
 80023f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	2000096c 	.word	0x2000096c

08002400 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <xTaskResumeAll+0x114>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <xTaskResumeAll+0x2a>
 8002416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	e7fe      	b.n	8002428 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800242a:	f7ff fb45 	bl	8001ab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <xTaskResumeAll+0x114>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3b01      	subs	r3, #1
 8002434:	4a37      	ldr	r2, [pc, #220]	; (8002514 <xTaskResumeAll+0x114>)
 8002436:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002438:	4b36      	ldr	r3, [pc, #216]	; (8002514 <xTaskResumeAll+0x114>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d161      	bne.n	8002504 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002440:	4b35      	ldr	r3, [pc, #212]	; (8002518 <xTaskResumeAll+0x118>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d05d      	beq.n	8002504 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002448:	e02e      	b.n	80024a8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800244a:	4b34      	ldr	r3, [pc, #208]	; (800251c <xTaskResumeAll+0x11c>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3318      	adds	r3, #24
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fa18 	bl	800188c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3304      	adds	r3, #4
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fa13 	bl	800188c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	2201      	movs	r2, #1
 800246c:	409a      	lsls	r2, r3
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <xTaskResumeAll+0x120>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <xTaskResumeAll+0x120>)
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4a27      	ldr	r2, [pc, #156]	; (8002524 <xTaskResumeAll+0x124>)
 8002486:	441a      	add	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3304      	adds	r3, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f7ff f9a1 	bl	80017d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002498:	4b23      	ldr	r3, [pc, #140]	; (8002528 <xTaskResumeAll+0x128>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	429a      	cmp	r2, r3
 80024a0:	d302      	bcc.n	80024a8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <xTaskResumeAll+0x12c>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024a8:	4b1c      	ldr	r3, [pc, #112]	; (800251c <xTaskResumeAll+0x11c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1cc      	bne.n	800244a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80024b6:	f000 fa05 	bl	80028c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <xTaskResumeAll+0x130>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d010      	beq.n	80024e8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80024c6:	f000 f857 	bl	8002578 <xTaskIncrementTick>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <xTaskResumeAll+0x12c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3b01      	subs	r3, #1
 80024da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f1      	bne.n	80024c6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <xTaskResumeAll+0x130>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <xTaskResumeAll+0x12c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d009      	beq.n	8002504 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80024f0:	2301      	movs	r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <xTaskResumeAll+0x134>)
 80024f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002504:	f7ff fb06 	bl	8001b14 <vPortExitCritical>

	return xAlreadyYielded;
 8002508:	68bb      	ldr	r3, [r7, #8]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000096c 	.word	0x2000096c
 8002518:	20000944 	.word	0x20000944
 800251c:	20000904 	.word	0x20000904
 8002520:	2000094c 	.word	0x2000094c
 8002524:	20000848 	.word	0x20000848
 8002528:	20000844 	.word	0x20000844
 800252c:	20000958 	.word	0x20000958
 8002530:	20000954 	.word	0x20000954
 8002534:	e000ed04 	.word	0xe000ed04

08002538 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <xTaskGetTickCount+0x18>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002544:	687b      	ldr	r3, [r7, #4]
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	20000948 	.word	0x20000948

08002554 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800255a:	f7ff fb67 	bl	8001c2c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <xTaskGetTickCountFromISR+0x20>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002568:	683b      	ldr	r3, [r7, #0]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000948 	.word	0x20000948

08002578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002582:	4b4e      	ldr	r3, [pc, #312]	; (80026bc <xTaskIncrementTick+0x144>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 8087 	bne.w	800269a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800258c:	4b4c      	ldr	r3, [pc, #304]	; (80026c0 <xTaskIncrementTick+0x148>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002594:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <xTaskIncrementTick+0x148>)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d11f      	bne.n	80025e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80025a0:	4b48      	ldr	r3, [pc, #288]	; (80026c4 <xTaskIncrementTick+0x14c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <xTaskIncrementTick+0x46>
 80025aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	e7fe      	b.n	80025bc <xTaskIncrementTick+0x44>
 80025be:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <xTaskIncrementTick+0x14c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	4b40      	ldr	r3, [pc, #256]	; (80026c8 <xTaskIncrementTick+0x150>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a3e      	ldr	r2, [pc, #248]	; (80026c4 <xTaskIncrementTick+0x14c>)
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4a3e      	ldr	r2, [pc, #248]	; (80026c8 <xTaskIncrementTick+0x150>)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b3e      	ldr	r3, [pc, #248]	; (80026cc <xTaskIncrementTick+0x154>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a3c      	ldr	r2, [pc, #240]	; (80026cc <xTaskIncrementTick+0x154>)
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	f000 f972 	bl	80028c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80025e0:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <xTaskIncrementTick+0x158>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d348      	bcc.n	800267c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025ea:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <xTaskIncrementTick+0x14c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d104      	bne.n	80025fe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025f4:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <xTaskIncrementTick+0x158>)
 80025f6:	f04f 32ff 	mov.w	r2, #4294967295
 80025fa:	601a      	str	r2, [r3, #0]
					break;
 80025fc:	e03e      	b.n	800267c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025fe:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <xTaskIncrementTick+0x14c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d203      	bcs.n	800261e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002616:	4a2e      	ldr	r2, [pc, #184]	; (80026d0 <xTaskIncrementTick+0x158>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800261c:	e02e      	b.n	800267c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3304      	adds	r3, #4
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff f932 	bl	800188c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	3318      	adds	r3, #24
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f929 	bl	800188c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	2201      	movs	r2, #1
 8002640:	409a      	lsls	r2, r3
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <xTaskIncrementTick+0x15c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <xTaskIncrementTick+0x15c>)
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <xTaskIncrementTick+0x160>)
 800265a:	441a      	add	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3304      	adds	r3, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f7ff f8b7 	bl	80017d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <xTaskIncrementTick+0x164>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	429a      	cmp	r2, r3
 8002674:	d3b9      	bcc.n	80025ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002676:	2301      	movs	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800267a:	e7b6      	b.n	80025ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <xTaskIncrementTick+0x164>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002682:	4915      	ldr	r1, [pc, #84]	; (80026d8 <xTaskIncrementTick+0x160>)
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d907      	bls.n	80026a4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002694:	2301      	movs	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e004      	b.n	80026a4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <xTaskIncrementTick+0x168>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	4a0f      	ldr	r2, [pc, #60]	; (80026e0 <xTaskIncrementTick+0x168>)
 80026a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <xTaskIncrementTick+0x16c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80026b0:	697b      	ldr	r3, [r7, #20]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000096c 	.word	0x2000096c
 80026c0:	20000948 	.word	0x20000948
 80026c4:	200008fc 	.word	0x200008fc
 80026c8:	20000900 	.word	0x20000900
 80026cc:	2000095c 	.word	0x2000095c
 80026d0:	20000964 	.word	0x20000964
 80026d4:	2000094c 	.word	0x2000094c
 80026d8:	20000848 	.word	0x20000848
 80026dc:	20000844 	.word	0x20000844
 80026e0:	20000954 	.word	0x20000954
 80026e4:	20000958 	.word	0x20000958

080026e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <vTaskSwitchContext+0xa0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <vTaskSwitchContext+0xa4>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80026fc:	e03e      	b.n	800277c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80026fe:	4b23      	ldr	r3, [pc, #140]	; (800278c <vTaskSwitchContext+0xa4>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <vTaskSwitchContext+0xa8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002712:	7afb      	ldrb	r3, [r7, #11]
 8002714:	f1c3 031f 	rsb	r3, r3, #31
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	491e      	ldr	r1, [pc, #120]	; (8002794 <vTaskSwitchContext+0xac>)
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <vTaskSwitchContext+0x5a>
	__asm volatile
 800272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002732:	f383 8811 	msr	BASEPRI, r3
 8002736:	f3bf 8f6f 	isb	sy
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	e7fe      	b.n	8002740 <vTaskSwitchContext+0x58>
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4a11      	ldr	r2, [pc, #68]	; (8002794 <vTaskSwitchContext+0xac>)
 800274e:	4413      	add	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	3308      	adds	r3, #8
 8002764:	429a      	cmp	r2, r3
 8002766:	d104      	bne.n	8002772 <vTaskSwitchContext+0x8a>
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a07      	ldr	r2, [pc, #28]	; (8002798 <vTaskSwitchContext+0xb0>)
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	2000096c 	.word	0x2000096c
 800278c:	20000958 	.word	0x20000958
 8002790:	2000094c 	.word	0x2000094c
 8002794:	20000848 	.word	0x20000848
 8002798:	20000844 	.word	0x20000844

0800279c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80027a4:	f000 f852 	bl	800284c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <prvIdleTask+0x28>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d9f9      	bls.n	80027a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <prvIdleTask+0x2c>)
 80027b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80027c0:	e7f0      	b.n	80027a4 <prvIdleTask+0x8>
 80027c2:	bf00      	nop
 80027c4:	20000848 	.word	0x20000848
 80027c8:	e000ed04 	.word	0xe000ed04

080027cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	e00c      	b.n	80027f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <prvInitialiseTaskLists+0x60>)
 80027e4:	4413      	add	r3, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe ffca 	bl	8001780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3301      	adds	r3, #1
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d9ef      	bls.n	80027d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <prvInitialiseTaskLists+0x64>)
 80027fa:	f7fe ffc1 	bl	8001780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80027fe:	480d      	ldr	r0, [pc, #52]	; (8002834 <prvInitialiseTaskLists+0x68>)
 8002800:	f7fe ffbe 	bl	8001780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <prvInitialiseTaskLists+0x6c>)
 8002806:	f7fe ffbb 	bl	8001780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800280a:	480c      	ldr	r0, [pc, #48]	; (800283c <prvInitialiseTaskLists+0x70>)
 800280c:	f7fe ffb8 	bl	8001780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002810:	480b      	ldr	r0, [pc, #44]	; (8002840 <prvInitialiseTaskLists+0x74>)
 8002812:	f7fe ffb5 	bl	8001780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <prvInitialiseTaskLists+0x78>)
 8002818:	4a05      	ldr	r2, [pc, #20]	; (8002830 <prvInitialiseTaskLists+0x64>)
 800281a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <prvInitialiseTaskLists+0x7c>)
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <prvInitialiseTaskLists+0x68>)
 8002820:	601a      	str	r2, [r3, #0]
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000848 	.word	0x20000848
 8002830:	200008d4 	.word	0x200008d4
 8002834:	200008e8 	.word	0x200008e8
 8002838:	20000904 	.word	0x20000904
 800283c:	20000918 	.word	0x20000918
 8002840:	20000930 	.word	0x20000930
 8002844:	200008fc 	.word	0x200008fc
 8002848:	20000900 	.word	0x20000900

0800284c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002852:	e019      	b.n	8002888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002854:	f7ff f930 	bl	8001ab8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <prvCheckTasksWaitingTermination+0x4c>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff f811 	bl	800188c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <prvCheckTasksWaitingTermination+0x50>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3b01      	subs	r3, #1
 8002870:	4a0a      	ldr	r2, [pc, #40]	; (800289c <prvCheckTasksWaitingTermination+0x50>)
 8002872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <prvCheckTasksWaitingTermination+0x54>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3b01      	subs	r3, #1
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <prvCheckTasksWaitingTermination+0x54>)
 800287c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800287e:	f7ff f949 	bl	8001b14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f80e 	bl	80028a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <prvCheckTasksWaitingTermination+0x54>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e1      	bne.n	8002854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000918 	.word	0x20000918
 800289c:	20000944 	.word	0x20000944
 80028a0:	2000092c 	.word	0x2000092c

080028a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fa3b 	bl	8001d2c <vPortFree>
			vPortFree( pxTCB );
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff fa38 	bl	8001d2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <prvResetNextTaskUnblockTime+0x38>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d104      	bne.n	80028de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <prvResetNextTaskUnblockTime+0x3c>)
 80028d6:	f04f 32ff 	mov.w	r2, #4294967295
 80028da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80028dc:	e008      	b.n	80028f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <prvResetNextTaskUnblockTime+0x38>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <prvResetNextTaskUnblockTime+0x3c>)
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	200008fc 	.word	0x200008fc
 8002900:	20000964 	.word	0x20000964

08002904 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002914:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3304      	adds	r3, #4
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe ffb6 	bl	800188c <uxListRemove>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10b      	bne.n	800293e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2201      	movs	r2, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	4b21      	ldr	r3, [pc, #132]	; (80029bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4013      	ands	r3, r2
 800293a:	4a20      	ldr	r2, [pc, #128]	; (80029bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800293c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d10a      	bne.n	800295c <prvAddCurrentTaskToDelayedList+0x58>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800294c:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3304      	adds	r3, #4
 8002952:	4619      	mov	r1, r3
 8002954:	481a      	ldr	r0, [pc, #104]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002956:	f7fe ff3e 	bl	80017d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800295a:	e026      	b.n	80029aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	429a      	cmp	r2, r3
 8002972:	d209      	bcs.n	8002988 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3304      	adds	r3, #4
 800297e:	4619      	mov	r1, r3
 8002980:	4610      	mov	r0, r2
 8002982:	f7fe ff4b 	bl	800181c <vListInsert>
}
 8002986:	e010      	b.n	80029aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3304      	adds	r3, #4
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f7fe ff41 	bl	800181c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d202      	bcs.n	80029aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80029a4:	4a09      	ldr	r2, [pc, #36]	; (80029cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6013      	str	r3, [r2, #0]
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000948 	.word	0x20000948
 80029b8:	20000844 	.word	0x20000844
 80029bc:	2000094c 	.word	0x2000094c
 80029c0:	20000930 	.word	0x20000930
 80029c4:	20000900 	.word	0x20000900
 80029c8:	200008fc 	.word	0x200008fc
 80029cc:	20000964 	.word	0x20000964

080029d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]

  if (priority != osPriorityError) {
 80029de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029e2:	2b84      	cmp	r3, #132	; 0x84
 80029e4:	d005      	beq.n	80029f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	3303      	adds	r3, #3
 80029f0:	60fb      	str	r3, [r7, #12]
  }

  return fpriority;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a04:	f3ef 8305 	mrs	r3, IPSR
 8002a08:	607b      	str	r3, [r7, #4]
  return(result);
 8002a0a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a24:	f7ff fc98 	bl	8002358 <vTaskStartScheduler>

  return osOK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8002a32:	f7ff ffe4 	bl	80029fe <inHandlerMode>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8002a3c:	f7ff fd8a 	bl	8002554 <xTaskGetTickCountFromISR>
 8002a40:	4603      	mov	r3, r0
 8002a42:	e002      	b.n	8002a4a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8002a44:	f7ff fd78 	bl	8002538 <xTaskGetTickCount>
 8002a48:	4603      	mov	r3, r0
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a50:	b087      	sub	sp, #28
 8002a52:	af02      	add	r7, sp, #8
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685c      	ldr	r4, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a64:	b29e      	uxth	r6, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ffaf 	bl	80029d0 <makeFreeRtosPriority>
 8002a72:	4602      	mov	r2, r0
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	9200      	str	r2, [sp, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4632      	mov	r2, r6
 8002a80:	4629      	mov	r1, r5
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff f968 	bl	8001d58 <xTaskCreate>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <osThreadCreate+0x46>
  }
#endif

  return handle;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]

  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <osDelay+0x16>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	e000      	b.n	8002ab4 <osDelay+0x18>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fa8d 	bl	8001fd4 <vTaskDelay>

  return osOK;
 8002aba:	2300      	movs	r3, #0
#else
  (void) millisec;

  return osErrorResource;
#endif
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fab5 	bl	800203c <vTaskSuspend>

  return osOK;
 8002ad2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
  if(inHandlerMode())
 8002ae4:	f7ff ff8b 	bl	80029fe <inHandlerMode>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00e      	beq.n	8002b0c <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fbc2 	bl	8002278 <xTaskResumeFromISR>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10b      	bne.n	8002b12 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <osThreadResume+0x40>)
 8002afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	e002      	b.n	8002b12 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fb57 	bl	80021c0 <vTaskResume>
  }
  return osOK;
 8002b12:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	e000ed04 	.word	0xe000ed04

08002b20 <main>:
 **
 **  Abstract: main program
 **
 **===========================================================================
 */
int main(void) {
 8002b20:	b5b0      	push	{r4, r5, r7, lr}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
	HAL_Init();
 8002b26:	f7fd fbb1 	bl	800028c <HAL_Init>

	/* Configure the System clock to 32 MHz */
	SystemClock_Config();
 8002b2a:	f000 f891 	bl	8002c50 <SystemClock_Config>

	/* Initialize LEDs */
	BSP_LED_Init(LED3);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7fd fb26 	bl	8000180 <BSP_LED_Init>
	BSP_LED_Init(LED4);
 8002b34:	2001      	movs	r0, #1
 8002b36:	f7fd fb23 	bl	8000180 <BSP_LED_Init>

	/* Thread 1 definition */
	osThreadDef(LED3, LED_Thread1, osPriorityNormal, 0,
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <main+0x60>)
 8002b3c:	f107 0414 	add.w	r4, r7, #20
 8002b40:	461d      	mov	r5, r3
 8002b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b46:	682b      	ldr	r3, [r5, #0]
 8002b48:	6023      	str	r3, [r4, #0]
			configMINIMAL_STACK_SIZE);

	/* Thread 2 definition */
	osThreadDef(LED4, LED_Thread2, osPriorityNormal, 0,
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <main+0x64>)
 8002b4c:	463c      	mov	r4, r7
 8002b4e:	461d      	mov	r5, r3
 8002b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b54:	682b      	ldr	r3, [r5, #0]
 8002b56:	6023      	str	r3, [r4, #0]
			configMINIMAL_STACK_SIZE);

	/* Start thread 1 */
	LEDThread1Handle = osThreadCreate(osThread(LED3), NULL);
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff75 	bl	8002a4e <osThreadCreate>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <main+0x68>)
 8002b68:	601a      	str	r2, [r3, #0]

	/* Start thread 2 */
	LEDThread2Handle = osThreadCreate(osThread(LED4), NULL);
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff6d 	bl	8002a4e <osThreadCreate>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <main+0x6c>)
 8002b78:	601a      	str	r2, [r3, #0]

	/* Start scheduler */
	osKernelStart();
 8002b7a:	f7ff ff51 	bl	8002a20 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	for (;;)
 8002b7e:	e7fe      	b.n	8002b7e <main+0x5e>
 8002b80:	08002e78 	.word	0x08002e78
 8002b84:	08002e94 	.word	0x08002e94
 8002b88:	200009b0 	.word	0x200009b0
 8002b8c:	200009b4 	.word	0x200009b4

08002b90 <LED_Thread1>:
  * @brief  Toggle LED3 thread 1
  * @param  thread not used
  * @retval None
  */
static void LED_Thread1(void const *argument)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  (void) argument;

  for (;;)
  {
    count = osKernelSysTick() + 2000;
 8002b9c:	f7ff ff47 	bl	8002a2e <osKernelSysTick>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002ba6:	60fb      	str	r3, [r7, #12]

    /* Toggle LED3 every 200 ms for 5 s */
    /* Just for indicating some errors */
    while (count >= osKernelSysTick())
 8002ba8:	e005      	b.n	8002bb6 <LED_Thread1+0x26>
    {
      BSP_LED_Toggle(LED3);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fd fb56 	bl	800025c <BSP_LED_Toggle>

      osDelay(200);
 8002bb0:	20c8      	movs	r0, #200	; 0xc8
 8002bb2:	f7ff ff73 	bl	8002a9c <osDelay>
    while (count >= osKernelSysTick())
 8002bb6:	f7ff ff3a 	bl	8002a2e <osKernelSysTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d9f3      	bls.n	8002baa <LED_Thread1+0x1a>
    }

    /* Turn off LED3 */
    BSP_LED_Off(LED3);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fd fb30 	bl	8000228 <BSP_LED_Off>

    /* Suspend Thread 1 */
    osThreadSuspend(NULL);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7ff ff7b 	bl	8002ac4 <osThreadSuspend>

    count = osKernelSysTick() + 2000;
 8002bce:	f7ff ff2e 	bl	8002a2e <osKernelSysTick>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002bd8:	60fb      	str	r3, [r7, #12]

    /* Toggle LED3 every 400 ms for 2 s */
    while (count >= osKernelSysTick())
 8002bda:	e005      	b.n	8002be8 <LED_Thread1+0x58>
    {
      BSP_LED_Toggle(LED3);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7fd fb3d 	bl	800025c <BSP_LED_Toggle>

      osDelay(50);
 8002be2:	2032      	movs	r0, #50	; 0x32
 8002be4:	f7ff ff5a 	bl	8002a9c <osDelay>
    while (count >= osKernelSysTick())
 8002be8:	f7ff ff21 	bl	8002a2e <osKernelSysTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d9f3      	bls.n	8002bdc <LED_Thread1+0x4c>
    }

    /* Resume Thread 2*/
    osThreadResume(LEDThread2Handle);
 8002bf4:	4b02      	ldr	r3, [pc, #8]	; (8002c00 <LED_Thread1+0x70>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff6f 	bl	8002adc <osThreadResume>
    count = osKernelSysTick() + 2000;
 8002bfe:	e7cd      	b.n	8002b9c <LED_Thread1+0xc>
 8002c00:	200009b4 	.word	0x200009b4

08002c04 <LED_Thread2>:
  * @brief  Toggle LED4 thread 2
  * @param  argument not used
  * @retval None
  */
static void LED_Thread2(void const *argument)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  (void) argument;

  for (;;)
  {
    count = osKernelSysTick() + 4000;
 8002c0c:	f7ff ff0f 	bl	8002a2e <osKernelSysTick>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8002c16:	60fb      	str	r3, [r7, #12]

    /* Toggle LED4 every 50 ms for 4 s */
    /* Just for indicating some errors */
    while (count >= osKernelSysTick())
 8002c18:	e005      	b.n	8002c26 <LED_Thread2+0x22>
    {
      BSP_LED_Toggle(LED4);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f7fd fb1e 	bl	800025c <BSP_LED_Toggle>

      osDelay(50);
 8002c20:	2032      	movs	r0, #50	; 0x32
 8002c22:	f7ff ff3b 	bl	8002a9c <osDelay>
    while (count >= osKernelSysTick())
 8002c26:	f7ff ff02 	bl	8002a2e <osKernelSysTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d9f3      	bls.n	8002c1a <LED_Thread2+0x16>
    }

    /* Turn off LED4 */
    BSP_LED_Off(LED4);
 8002c32:	2001      	movs	r0, #1
 8002c34:	f7fd faf8 	bl	8000228 <BSP_LED_Off>

    /* Resume Thread 1 */
    osThreadResume(LEDThread1Handle);
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <LED_Thread2+0x48>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff4d 	bl	8002adc <osThreadResume>

    /* Suspend Thread 2 */
    osThreadSuspend(NULL);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7ff ff3e 	bl	8002ac4 <osThreadSuspend>
    count = osKernelSysTick() + 4000;
 8002c48:	e7e0      	b.n	8002c0c <LED_Thread2+0x8>
 8002c4a:	bf00      	nop
 8002c4c:	200009b0 	.word	0x200009b0

08002c50 <SystemClock_Config>:
  *            PLLDIV                         = 3
  *            Flash Latency(WS)              = 1
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b094      	sub	sp, #80	; 0x50
 8002c54:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	2234      	movs	r2, #52	; 0x34
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f8e6 	bl	8002e40 <memset>

  /* Enable HSI Oscillator and Activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8002c74:	2302      	movs	r3, #2
 8002c76:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8002c80:	2302      	movs	r3, #2
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8002c84:	2300      	movs	r3, #0
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLL_MUL6;
 8002c88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLL_DIV3;
 8002c8e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002c92:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c94:	f107 0308 	add.w	r3, r7, #8
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fdc9 	bl	8000830 <HAL_RCC_OscConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d000      	beq.n	8002ca6 <SystemClock_Config+0x56>
  {
    /* Initialization Error */
    while(1);
 8002ca4:	e7fe      	b.n	8002ca4 <SystemClock_Config+0x54>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <SystemClock_Config+0xbc>)
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <SystemClock_Config+0xbc>)
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6253      	str	r3, [r2, #36]	; 0x24
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <SystemClock_Config+0xbc>)
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cbe:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <SystemClock_Config+0xc0>)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <SystemClock_Config+0xc0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8002cce:	bf00      	nop
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <SystemClock_Config+0xc0>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d0f9      	beq.n	8002cd0 <SystemClock_Config+0x80>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002cdc:	230f      	movs	r3, #15
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cec:	2300      	movs	r3, #0
 8002cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002cf0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe f8ca 	bl	8000e90 <HAL_RCC_ClockConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d000      	beq.n	8002d04 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    while(1);
 8002d02:	e7fe      	b.n	8002d02 <SystemClock_Config+0xb2>
  }
}
 8002d04:	bf00      	nop
 8002d06:	3750      	adds	r7, #80	; 0x50
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40007000 	.word	0x40007000

08002d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d16:	e003      	b.n	8002d20 <LoopCopyDataInit>

08002d18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d1e:	3104      	adds	r1, #4

08002d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d20:	480a      	ldr	r0, [pc, #40]	; (8002d4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d28:	d3f6      	bcc.n	8002d18 <CopyDataInit>
  ldr r2, =_sbss
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d2c:	e002      	b.n	8002d34 <LoopFillZerobss>

08002d2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d30:	f842 3b04 	str.w	r3, [r2], #4

08002d34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d38:	d3f9      	bcc.n	8002d2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d3a:	f000 f829 	bl	8002d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3e:	f000 f85b 	bl	8002df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d42:	f7ff feed 	bl	8002b20 <main>
  bx lr
 8002d46:	4770      	bx	lr
  ldr r3, =_sidata
 8002d48:	08002ed8 	.word	0x08002ed8
  ldr r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d50:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8002d54:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8002d58:	200009b8 	.word	0x200009b8

08002d5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC1_IRQHandler>

08002d5e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002d6e:	e7fe      	b.n	8002d6e <HardFault_Handler+0x4>

08002d70 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <MemManage_Handler+0x4>

08002d76 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002d7a:	e7fe      	b.n	8002d7a <BusFault_Handler+0x4>

08002d7c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <UsageFault_Handler+0x4>

08002d82 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
	...

08002d90 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemCoreClock variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
	/*!< Set MSION bit */
	RCC->CR |= (uint32_t) 0x00000100;
 8002d94:	4a15      	ldr	r2, [pc, #84]	; (8002dec <SystemInit+0x5c>)
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <SystemInit+0x5c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9e:	6013      	str	r3, [r2, #0]

	/*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
	RCC->CFGR &= (uint32_t) 0x88FFC00C;
 8002da0:	4912      	ldr	r1, [pc, #72]	; (8002dec <SystemInit+0x5c>)
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <SystemInit+0x5c>)
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <SystemInit+0x60>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]

	/*!< Reset HSION, HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xEEFEFFFE;
 8002dac:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <SystemInit+0x5c>)
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <SystemInit+0x5c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002db6:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8002dba:	6013      	str	r3, [r2, #0]

	/*!< Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <SystemInit+0x5c>)
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <SystemInit+0x5c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]

	/*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
	RCC->CFGR &= (uint32_t) 0xFF02FFFF;
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <SystemInit+0x5c>)
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <SystemInit+0x5c>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8002dd2:	6093      	str	r3, [r2, #8]

	/*!< Disable all interrupts */
	RCC->CIR = 0x00000000;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <SystemInit+0x5c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */

#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <SystemInit+0x64>)
 8002ddc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002de0:	609a      	str	r2, [r3, #8]
#endif
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	88ffc00c 	.word	0x88ffc00c
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__libc_init_array>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	2500      	movs	r5, #0
 8002dfc:	4e0c      	ldr	r6, [pc, #48]	; (8002e30 <__libc_init_array+0x38>)
 8002dfe:	4c0d      	ldr	r4, [pc, #52]	; (8002e34 <__libc_init_array+0x3c>)
 8002e00:	1ba4      	subs	r4, r4, r6
 8002e02:	10a4      	asrs	r4, r4, #2
 8002e04:	42a5      	cmp	r5, r4
 8002e06:	d109      	bne.n	8002e1c <__libc_init_array+0x24>
 8002e08:	f000 f822 	bl	8002e50 <_init>
 8002e0c:	2500      	movs	r5, #0
 8002e0e:	4e0a      	ldr	r6, [pc, #40]	; (8002e38 <__libc_init_array+0x40>)
 8002e10:	4c0a      	ldr	r4, [pc, #40]	; (8002e3c <__libc_init_array+0x44>)
 8002e12:	1ba4      	subs	r4, r4, r6
 8002e14:	10a4      	asrs	r4, r4, #2
 8002e16:	42a5      	cmp	r5, r4
 8002e18:	d105      	bne.n	8002e26 <__libc_init_array+0x2e>
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
 8002e1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e20:	4798      	blx	r3
 8002e22:	3501      	adds	r5, #1
 8002e24:	e7ee      	b.n	8002e04 <__libc_init_array+0xc>
 8002e26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e2a:	4798      	blx	r3
 8002e2c:	3501      	adds	r5, #1
 8002e2e:	e7f2      	b.n	8002e16 <__libc_init_array+0x1e>
 8002e30:	08002ed0 	.word	0x08002ed0
 8002e34:	08002ed0 	.word	0x08002ed0
 8002e38:	08002ed0 	.word	0x08002ed0
 8002e3c:	08002ed4 	.word	0x08002ed4

08002e40 <memset>:
 8002e40:	4603      	mov	r3, r0
 8002e42:	4402      	add	r2, r0
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d100      	bne.n	8002e4a <memset+0xa>
 8002e48:	4770      	bx	lr
 8002e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e4e:	e7f9      	b.n	8002e44 <memset+0x4>

08002e50 <_init>:
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e52:	bf00      	nop
 8002e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e56:	bc08      	pop	{r3}
 8002e58:	469e      	mov	lr, r3
 8002e5a:	4770      	bx	lr

08002e5c <_fini>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr
